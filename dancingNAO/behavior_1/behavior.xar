<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="main" id="1" localization="8" tooltip="" x="276" y="47"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import sys
import motion
import almath
import math
import time
from naoqi import ALProxy

class Latinao:
    def __init__(self):
        self.total_time = 3 #total time of the dance in minutes
        #proxy posture
        try:
            self.postureProxy = ALProxy("ALRobotPosture")
        except Exception, e:
            print "Could not create proxy to ALRobotPosture"
            print "Error was: ", e
        #proxy motion
        try:
            self.motionProxy = ALProxy("ALMotion")
        except Exception, e:
            print "Could not create proxy to ALMotion"
            print "Error was: ", e
        #proxy leds
        try:
            self.ledsProxy = ALProxy("ALLeds")
        except Exception, e:
            print "Could not create proxy to ALLeds"
            print "Error was: ", e
        self.tts = ALProxy("ALTextToSpeech")
    ##################### Mandatory       #####################
    def crouch(self):
        self.postureProxy.goToPosture("Crouch", 0.5)
    def stand(self):
        self.postureProxy.goToPosture("Stand", 0.5)
    def sit(self):
        self.postureProxy.goToPosture("Sit", 0.5)
    def standInit(self):
        self.postureProxy.goToPosture("StandInit", 0.5)
    def StandZero(self):
        self.postureProxy.goToPosture("StandZero", 0.5)
    def sitRelax(self):
        self.postureProxy.goToPosture("SitRelax", 0.5)
    ###################    Intermediate   ###################
    def say(self):
        self.tts.say('I can not give up now')
    def move_forward(self):
        distance_x_m = 0.08
        distance_y_m = 0.0
        theta_deg = 0.0
        # The command position estimation will be set to the sensor position when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motionProxy.getRobotPosition(True))
        targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = 0
        self.motionProxy.setMoveArmsEnabled(enableArms, enableArms)
        self.motionProxy.moveTo(distance_x_m, distance_y_m, theta_deg)
    def move_backward(self):
        distance_x_m = -0.08
        distance_y_m = 0.0
        theta_deg = 0.0
        # The command position estimation will be set to the sensor position when the robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motionProxy.getRobotPosition(True))
        targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = 0
        self.motionProxy.setMoveArmsEnabled(enableArms, enableArms)
        self.motionProxy.moveTo(distance_x_m, distance_y_m, theta_deg)
    def arms_opening(self):
        RShoulderPitch = 78.0
        RShoulderRoll = -16.6
        RElbowYaw = 68.3
        RElbowRoll = 49.2
        RWristYaw = 4.3
        RHand = 0.10
        LShoulderPitch = 78.0
        LShoulderRoll = 16.6
        LElbowYaw = -68.3
        LElbowRoll = -49.2
        LWristYaw = 4.3
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand]
        timeLists = 2
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand]
        timeLists = 2
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        time.sleep(0.2)  # Waiting between the two movements
        # movement arms #
        RShoulderPitch = 24.9
        RShoulderRoll = 8.0
        RElbowYaw = 67.8
        RElbowRoll = 14.7
        RWristYaw = 79.3
        RHand = 0.35
        RHand = 0.35
        LShoulderPitch = 68.8
        LShoulderRoll = 14.3
        LElbowYaw = -68.4
        LElbowRoll = -53.9
        LWristYaw = 4.5
        LWristYaw = 4.5
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.08)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.08)
        time.sleep(1.2)
        # Close arms
        RShoulderPitch = 24.5
        RShoulderRoll = 16.9
        RElbowYaw = 67.4
        RElbowRoll = 14.9
        RWristYaw = 79.1
        RHand = 0.35
        LShoulderPitch = 66.7
        LShoulderRoll = -12.3
        LElbowYaw = -69.0
        LElbowRoll = -53.7
        LElbowRoll = -53.7
        LWristYaw = 4.6
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.15)
        time.sleep(0.4)
        # Stretch and raise arms
        RShoulderPitch = 24.7
        RShoulderRoll = -51.8
        RElbowYaw = 45.6
        RElbowRoll = 14.7
        RWristYaw = 78.9
        RHand = 0.35
        LShoulderPitch = 24.7
        LShoulderRoll = 51.8
        LElbowYaw = -45.6
        LElbowRoll = -14.7
        LWristYaw = -78.9
        LHand = 0.0
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        time.sleep(0.2)
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        time.sleep(2.2)
        # Final position
        RShoulderPitch = 66.4
        RShoulderRoll = -26.1
        RElbowYaw = 106.0
        RElbowRoll = 80
        RWristYaw = 85
        RHand = 0.35
        LShoulderPitch = 66.4
        LShoulderRoll = 26.1
        LElbowYaw = -106.0
        LElbowRoll = -44.2
        LWristYaw = 4.6
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        timeLists = 1.5
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        timeLists = 1.5
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)

    def union_arms(self):
        RShoulderPitch = 67.7
        RShoulderRoll = -26.4
        RElbowYaw = 90.9
        RElbowRoll = 88.5
        RWristYaw = 59.2
        RHand = 0.35
        LShoulderPitch = 80.2
        LShoulderRoll = 24.1
        LElbowYaw = -90.0
        LElbowRoll = -4.4
        LWristYaw = 0.5
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        timeLists = 1
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        timeLists = 1
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        time.sleep(0.2)  # Waiting between the two movements
        ####### Movement arms  ###########
        # Open/extend arms
        RShoulderPitch = 58.8
        RShoulderRoll = -25.9
        RElbowYaw = 90.6
        RElbowRoll = 25.0
        RWristYaw = 3.2
        RHand = 0.35
        LShoulderPitch = 58.8
        LShoulderRoll = 25.9
        LElbowYaw = -90.6
        LElbowRoll = -25.0
        LWristYaw = -59.4
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        timeLists = 3
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        timeLists = 2
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        RWristYaw = 59.4
        self.motionProxy.post.angleInterpolation("RWristYaw", RWristYaw * almath.TO_RAD, 1, True)
        time.sleep(0.5)  # For a better movements synchronization
        # Close arms
        RShoulderPitch = 45.9
        RShoulderRoll = 15.3
        RElbowRoll = 21.6
        LShoulderPitch = 45.9
        LShoulderRoll = -15.3
        LElbowRoll = -21.6
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        timeLists = 2
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        timeLists = 2
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        # Wait a few seconds
        time.sleep(1)
        # Go to final position
        RShoulderPitch = 78.0
        RShoulderRoll = -16.6
        RElbowYaw = 68.3
        RElbowRoll = 49.2
        RWristYaw = 4.3
        RHand = 0.35
        LShoulderPitch = 78.0
        LShoulderRoll = 16.6
        LElbowYaw = -68.3
        LElbowRoll = -49.2
        LWristYaw = 4.3
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        timeLists = 1.5
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        timeLists = 1.5
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
    def double_movement(self):
        RShoulderPitch = 78.0
        RShoulderRoll = -39.9
        RElbowYaw = 68.3
        RElbowRoll = 57.2
        RWristYaw = 95
        RHand = 0.10
        LShoulderPitch = 78.0
        LShoulderRoll = 39.9
        LElbowYaw = -68.3
        LElbowRoll = -57.2
        LWristYaw = 4.3
        LHand = 0.0
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand]
        timeLists = 2
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand]
        timeLists = 2
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        time.sleep(0.5)  # Waiting between the two movements
        ########## Movement arms ###########
        # Start rotation movement
        RShoulderPitch = 77.7
        RShoulderRoll = -39.5
        RElbowYaw = 33.7
        RElbowRoll = 70
        RWristYaw = 95
        RHand = 0.10
        LShoulderPitch = 77.8
        LShoulderRoll = 49.2
        LElbowYaw = -68.5
        LElbowRoll = -9.4
        LWristYaw = 4.5
        LHand = 0.0
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.05)
        time.sleep(0.2)
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.08)
        time.sleep(1.2)
        # Arms parallel to the floor
        RShoulderPitch = 15.1
        RShoulderRoll = -10.6
        RElbowYaw = 9.5
        RElbowRoll = 70
        RWristYaw = 95
        RHand = 0.10
        LShoulderPitch = 77.8
        LShoulderRoll = 75.8
        LElbowYaw = -68.5
        LElbowRoll = -2.5
        LWristYaw = 4.5
        LHand = 0.0
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.15)
        time.sleep(0.3)
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        time.sleep(0.6)
        # Go to final position
        RShoulderPitch = 62.4
        RShoulderRoll = -15.7
        RElbowYaw = 51.7
        RElbowRoll = 81
        RWristYaw = 105
        RHand = 0.10
        LShoulderPitch = 27.0
        LShoulderRoll = 29.8
        LElbowYaw = -72.9
        LElbowRoll = -27.2
        LWristYaw = 4.5
        LHand = 0.0
        names = "RArm"
        angleLists = [RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                      RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD]
        self.motionProxy.post.angleInterpolation(names, angleLists, 1.4, True)
        time.sleep(0.3)
        names = "LArm"
        angleLists = [LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                      LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD]
        self.motionProxy.angleInterpolation(names, angleLists, 1.4, True)

    def rotation_handgun(self):
        RShoulderPitch = 67.7
        RShoulderRoll = -26.4
        RElbowYaw = 90.9
        RElbowRoll = 88.5
        RWristYaw = 80
        RHand = 0.35
        LShoulderPitch = 78.0
        LShoulderRoll = 16.6
        LElbowYaw = -68.3
        LElbowRoll = -49.2
        LWristYaw = 4.3
        LHand = 0.0
        names = "LArm"
        angleLists = [ LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD,     LElbowYaw * almath.TO_RAD,
        LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD ]
        timeLists = 1
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [ RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD, RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD ]
        timeLists = 1
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        time.sleep(1)
        # Open RHand
        RHandAngle = 0.90
        names = "RHand"
        angleLists = [ RHandAngle ]
        timeLists = 1
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        # NAO:
        #ttsProxy.say("Inserisci il ventaglio nella mano per favore")
        #time.sleep(1)
        # NAO:
        #ttsProxy.say("Grazie")
        # Close RHand
        names = "RHand"
        timeLists = 1
        RHandAngle = 0.05
        angleLists = [ RHandAngle ]
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
    def diagonal_right(self):
        distance_x_m=0.03
        distance_y_m=-0.012
        theta_deg=0.0  #degrees of the diagonal
        # The command position estimation will be set to the sensor position when the         robot starts moving, so we use sensors first and commands later.
        initPosition = almath.Pose2D(self.motionProxy.getRobotPosition(True))
        targetDistance = almath.Pose2D(distance_x_m, distance_y_m, theta_deg * almath.PI / 180)
        expectedEndPosition = initPosition * targetDistance
        enableArms = 0
        self.motionProxy.setMoveArmsEnabled(enableArms, enableArms)
        self.motionProxy.moveTo(distance_x_m, distance_y_m,theta_deg)
    def rotation_foot_R(self):
        self.postureProxy.goToPosture("StandInit", 0.3)
        self.motionProxy.wbEnable(True)
        # Legs/Feet Configuration
        stateName = "Plane"
        supportLeg = "RLeg"
        self.motionProxy.wbFootState(stateName, supportLeg)
        stateName = "Fixed"
        supportLeg = "LLeg"
        self.motionProxy.wbFootState(stateName, supportLeg)
        # Cartesian foot trajectory
        # Warning: Needs a PoseInit before executing
        space      =  motion.FRAME_ROBOT
        axisMask   = 63                     # control all the effector's axes
        isAbsolute = False
        # Lower the Torso and move to the side
        effector = "Torso"
        path     = [0.0, 0.00, 0.00, 0.0, 0.0, 0.05]
        timeList = 3.0 # seconds
        self.motionProxy.positionInterpolation(effector, space, path, axisMask, timeList, isAbsolute)
        time.sleep(3) # wait a few seconds
        # Back to the inizial position
        self.postureProxy.goToPosture("StandInit", 0.25)
        self.motionProxy.wbEnable(False)
    def rotation_foot_L(self):
        self.motionProxy.wbEnable(True)
        # Legs/Feet Configuration
        stateName = "Fixed"
        supportLeg = "RLeg"
        self.motionProxy.wbFootState(stateName, supportLeg)
        stateName = "Plane"
        supportLeg = "LLeg"
        self.motionProxy.wbFootState(stateName, supportLeg)
        # Cartesian foot trajectory
        # Warning: Needs a PoseInit before executing
        space      =  motion.FRAME_ROBOT
        axisMask   = 63                     # control all the effector's axes
        isAbsolute = False
        # Lower the Torso and move to the side
        effector = "Torso"
        path     = [0.0, 0.00, 0.00, 0.0, 0.0, 0.05]
        timeList = 3.0 # seconds
        self.motionProxy.positionInterpolation(effector, space, path, axisMask, timeList, isAbsolute)
        # Back to the inizial position
        self.postureProxy.goToPosture("StandInit", 0.25)
        self.motionProxy.wbEnable(False)
    def arms_opening(self):
        RShoulderPitch = 78.0
        RShoulderRoll = -16.6
        RElbowYaw = 68.3
        RElbowRoll = 49.2
        RWristYaw = 4.3
        RHand = 0.10
        LShoulderPitch = 78.0
        LShoulderRoll = 16.6
        LElbowYaw = -68.3
        LElbowRoll = -49.2
        LWristYaw = 4.3
        LHand = 0.0
        names = "LArm"
        angleLists = [ LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                       LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand ]
        timeLists = 2
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [ RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                       RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand ]
        timeLists = 2
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
        time.sleep(0.2) # Waiting between the two movements

        ########## Movement arms  ###########

        RShoulderPitch = 24.9
        RShoulderRoll = 8.0
        RElbowYaw = 67.8
        RElbowRoll = 14.7
        RWristYaw = 79.3
        RHand = 0.35
        LShoulderPitch = 68.8
        LShoulderRoll = 14.3
        LElbowYaw = -68.4
        LElbowRoll = -53.9
        LWristYaw = 4.5
        LHand = 0.0
        names = "LArm"
        angleLists = [ LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                       LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD ]
        self.motionProxy.setAngles(names, angleLists, 0.08)
        names = "RArm"
        angleLists = [ RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                       RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD ]
        self.motionProxy.setAngles(names, angleLists, 0.08)
        time.sleep(1.2)

        # Close arms

        RShoulderPitch = 24.5
        RShoulderRoll = 16.9
        RElbowYaw = 67.4
        RElbowRoll = 14.9
        RWristYaw = 79.1
        RHand = 0.35
        LShoulderPitch = 66.7
        LShoulderRoll = -12.3
        LElbowYaw = -69.0
        LElbowRoll = -53.7
        LWristYaw = 4.6
        LHand = 0.0
        names = "LArm"
        angleLists = [ LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                       LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD ]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        names = "RArm"
        angleLists = [ RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                       RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD ]
        self.motionProxy.setAngles(names, angleLists, 0.15)
        time.sleep(0.4)

        # Stretch and raise arms
        RShoulderPitch = 24.7
        RShoulderRoll = -51.8
        RElbowYaw = 45.6
        RElbowRoll = 14.7
        RWristYaw = 78.9
        RHand = 0.35
        LShoulderPitch = 24.7
        LShoulderRoll = 51.8
        LElbowYaw = -45.6
        LElbowRoll = -14.7
        LWristYaw = -78.9
        LHand = 0.0
        names = "RArm"
        angleLists = [ RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                       RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD ]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        time.sleep(0.2)
        names = "LArm"
        angleLists = [ LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                       LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD ]
        self.motionProxy.setAngles(names, angleLists, 0.1)
        time.sleep(2.2)

        # Final position

        RShoulderPitch = 66.4
        RShoulderRoll = -26.1
        RElbowYaw = 106.0
        RElbowRoll = 80
        RWristYaw = 85
        RHand = 0.35
        LShoulderPitch = 66.4
        LShoulderRoll = 26.1
        LElbowYaw = -106.0
        LElbowRoll = -44.2
        LWristYaw = 4.6
        LHand = 0.0
        names = "LArm"
        angleLists = [ LShoulderPitch * almath.TO_RAD, LShoulderRoll * almath.TO_RAD, LElbowYaw * almath.TO_RAD,
                       LElbowRoll * almath.TO_RAD, LWristYaw * almath.TO_RAD, LHand * almath.TO_RAD ]
        timeLists = 1.5
        self.motionProxy.post.angleInterpolation(names, angleLists, timeLists, True)
        names = "RArm"
        angleLists = [ RShoulderPitch * almath.TO_RAD, RShoulderRoll * almath.TO_RAD, RElbowYaw * almath.TO_RAD,
                       RElbowRoll * almath.TO_RAD, RWristYaw * almath.TO_RAD, RHand * almath.TO_RAD ]
        timeLists = 1.5
        self.motionProxy.angleInterpolation(names, angleLists, timeLists, True)
    def led_face(self):
        rDuration = 1.0;
        """self.ledsProxy.post.fadeRGB( "FaceLedsTop", 0x0000ff, rDuration );
        self.ledsProxy.post.fadeRGB( "FaceLedsInternal", 0x00ff00, rDuration );
        self.ledsProxy.post.fadeRGB( "FaceLedsBottom", 0x0000ff, rDuration );
        self.ledsProxy.fadeRGB( "FaceLedsExternal", 0x0000ff, rDuration );
        """
        name = 'EarLeds'
        intensity = 0.5
        duration = 1.0
        self.ledsProxy.fade(name, intensity, duration)
    def move_to(self, x, y):
        initPosition = am.Pose2D(self.motionProxy.getRobotPosition(False))
        Theta = math.pi/2.0
        self.motionProxy.post.moveTo(x, y, Theta)
        endPosition = am.Pose2D(self.motionProxy.getRobotPosition(False))
        #motionProxy.stopMove()
        print endPosition
    def move_to_with_velocity(self,x,y,t,f):
        time = 10 # seconds
        while (t<testTime):
            # TARGET VELOCITY
            # Default walk (MaxStepX = 0.04 m)
            self.motionProxy.setWalkTargetVelocity(x, y, t, f)
            time.sleep(3.0)
    def move_head_walking(self):
        testTime = 10 # seconds
        t = 0
        dt = 0.2
        while (t<testTime):

            # WALK
            X         = 0.4#random.uniform(0.4, 1.0)
            Y         = -0.4#andom.uniform(-0.4, 0.4)
            Theta     = 0-0.4#random.uniform(-0.4, 0.4)
            Frequency = 0.5#random.uniform(0.5, 1.0)
            self.motionProxy.setWalkTargetVelocity(X, Y, Theta, Frequency)

            # JERKY HEAD
            self.motionProxy.setAngles("HeadYaw", -1.0, 0.7) #angle, speed
            self.motionProxy.setAngles("HeadPitch", -0.5, 0.7)
            t = t + dt
            time.sleep(dt)
        # stop walk on the next double support
        self.motionProxy.stopMove()
    def move_head_hips(self, targetCoordinateList):
        effectorName = "Head"
        # Active Head tracking
        isEnabled = True
        self.motionProxy.wbEnableEffectorControl(effectorName, isEnabled)

        # Example showing how to set orientation target for Head tracking
        # The 3 coordinates are absolute head orientation in NAO_SPACE
        # Rotation in RAD in x, y and z axis

        # X Axis Head Orientation feasible movement = [-20.0, +20.0] degree
        # Y Axis Head Orientation feasible movement = [-75.0, +70.0] degree
        # Z Axis Head Orientation feasible movement = [-30.0, +30.0] degree

        """targetCoordinateList = [
        [+20.0,  00.0,  00.0], # target 0
        [-20.0,  00.0,  00.0], # target 1
        [+20.0,  00.0,  00.0], # target 1
        [ 00.0, +70.0,  00.0], # target 2
        [ 00.0, +70.0, +30.0], # target 3
        [ 00.0, +70.0, -30.0], # target 4
        [ 00.0, -75.0,  00.0], # target 5
        [ 00.0, -75.0, +30.0], # target 6
        [ 00.0, -75.0, -30.0], # target 7
        [ 00.0,  00.0,  00.0], # target 8

        ]"""

        # wbSetEffectorControl is a non blocking function
        # time.sleep allow head go to his target
        # The recommended minimum period between two successives set commands is
        # 0.2 s.
        for targetCoordinate in targetCoordinateList:
            targetCoordinate = [target*math.pi/180.0 for target in targetCoordinate]
            self.motionProxy.wbSetEffectorControl(effectorName, targetCoordinate)
            time.sleep(3.0)

        # Deactivate Head tracking
        isEnabled = False
        self.motionProxy.wbEnableEffectorControl(effectorName, isEnabled)
    def move_bodydiago_armsupdown(self):
        targetCoordinateList = [
        [+20.0,  00.0,  00.0], # target 0
        [-20.0,  00.0,  00.0], # target 1
        [+20.0,  00.0,  00.0], # target 1
        [ 00.0, +70.0,  00.0], # target 2
        [ 00.0, +70.0, +30.0], # target 3
        [ 00.0, +70.0, -30.0], # target 4
        [ 00.0, -75.0,  00.0], # target 5
        [ 00.0, -75.0, +30.0], # target 6
        [ 00.0, -75.0, -30.0], # target 7
        [ 00.0,  00.0,  00.0], # target 8
        ]
        self.move_head_hips(targetCoordinateList)
        self.postureProxy.goToPosture("StandInit", 0.5)
    def arms_motion(self, time):
        t = 0
        dt = 0.2
        JointNamesL = ["LShoulderPitch", "LShoulderRoll", "LElbowYaw", "LElbowRoll"]
        JointNamesR = ["RShoulderPitch", "RShoulderRoll", "RElbowYaw", "RElbowRoll"]
        Arm1 = [-80,  30, 0, -50]
        Arm1 = [ x * motion.TO_RAD for x in Arm1]
        Arm2 = [-40,  50, 0, -80]
        Arm2 = [ x * motion.TO_RAD for x in Arm2]
        Arm1 = [-80, 30, 0, -50]
        Arm1 = [x * motion.TO_RAD for x in Arm1]
        Arm2 = [-40, 50, 0, -80]
        Arm2 = [x * motion.TO_RAD for x in Arm2]
        pFractionMaxSpeed = 0.6
        while (t<time):
            self.motionProxy.angleInterpolationWithSpeed(JointNamesL, Arm1, pFractionMaxSpeed)
            self.motionProxy.angleInterpolationWithSpeed(JointNamesL, Arm2, pFractionMaxSpeed)
            self.motionProxy.angleInterpolationWithSpeed(JointNamesL, Arm1, pFractionMaxSpeed)
            self.motionProxy.angleInterpolationWithSpeed(JointNamesR, Arm1, pFractionMaxSpeed)
            self.motionProxy.angleInterpolationWithSpeed(JointNamesR, Arm2, pFractionMaxSpeed)
            self.motionProxy.angleInterpolationWithSpeed(JointNamesR, Arm1, pFractionMaxSpeed)
            t = t + dt

        #time.sleep(2.0)

    def body_motion(self, time):
        t = 0
        dt = 0.2
        names = "Body"
        # We still need to specify the correct number of target angles, so
        # we need to find the number of joints that this Nao has.
        # Here we are using the getBodyNames method, which tells us all
        # the names of the joints in the alias "Body".
        # We could have used this list for the "names" parameter.
        numJoints = len(self.motionProxy.getBodyNames("Body"))
        # Make a list of the correct length. All angles are zero.
        targetAngles = [0.0] * numJoints
        # Using 10% of maximum joint speed
        maxSpeedFraction = 0.1
        while (t < time):
            self.motionProxy.angleInterpolationWithSpeed(names, targetAngles, maxSpeedFraction)
            t = t + dt
    def head_move_to(self, targetAngles):
        names = "Head"
        # We still need to specify the correct number of target angles
        #targetAngles = [0,0,0]
        maxSpeedFraction = 0.6  # Using 20% of maximum joint speed
        self.motionProxy.angleInterpolationWithSpeed(names, targetAngles, maxSpeedFraction)
    def head_motion_bezier(self, time):
        t = 0
        dt = 0.2
        targetAngles = [0,0]
        names = ["Head"]
        # Each joint can have lists of different lengths, but the number of
        # angles and the number of times must be the same for each joint.
        # Here, the second joint ("HeadPitch") has three angles, and
        # three corresponding times.
        angleLists = [[0.0 * almath.TO_RAD, 0.0],
                      [-30.0 * almath.TO_RAD, 30.0 * almath.TO_RAD]]
        timeLists = [[0.5, 1.0], [0.5, 1.0]]
        if(time):
            while (t < time):
                self.motionProxy.angleInterpolationBezier(names, timeLists, angleLists)
                t = t + dt
        else:
            self.motionProxy.angleInterpolationBezier(names, timeLists, angleLists)
        self.head_move_to(targetAngles)
    def open_right_hand(self):
        self.motionProxy.post.openHand('RHand')
    def open_left_hand(self):
        self.motionProxy.openHand('LHand')
    def open_both_hands(self):
        self.open_right_hand()
        self.open_left_hand()
    def close_left_hand(self):
        self.motionProxy.post.closeHand('LHand')
    def close_right_hand(self):
        self.motionProxy.closeHand('RHand')
    def close_both_hands(self):
        self.close_left_hand()
        self.close_right_hand()

    def cow_movement(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch") #Movement of the head up-down
        times.append([0.96, 1.32, 1.76, 2, 2.24, 2.48, 2.72, 2.96, 3.2, 3.44, 3.68, 3.92, 4.16, 4.4, 4.64, 4.88, 5.12, 5.36, 5.6, 5.84, 6.08, 6.32, 6.56, 6.8, 7.04, 7.28, 7.52, 7.76, 8, 8.52, 8.76, 9, 9.24, 9.48, 9.72, 9.96, 10.2, 10.44, 10.68, 10.92, 11.16, 11.4, 11.64, 11.88, 12.12, 12.36, 12.72, 13.04, 13.28, 13.52, 13.76, 14, 14.24, 14.48, 14.72, 14.96, 15.2, 15.44, 15.68, 15.92, 16.24, 16.64])
        keys.append([[-0.392746, [3, -0.32, 0], [3, 0.12, 0]], [-0.392746, [3, -0.12, 0], [3, 0.146667, 0]], [-0.392746, [3, -0.146667, 0], [3, 0.08, 0]], [-0.105767, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105767, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.173333, 0]], [-0.392746, [3, -0.173333, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.12, 0]], [-0.0808051, [3, -0.12, -0.0668442], [3, 0.106667, 0.059417]], [-0.0139626, [3, -0.106667, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.106667, 0]], [-0.375714, [3, -0.106667, 0.0470987], [3, 0.133333, -0.0588734]], [-0.434587, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("HeadYaw") #Movement of the head right-left
        times.append([0.96, 1.32, 1.76, 2, 2.24, 2.48, 2.72, 2.96, 3.2, 3.44, 3.68, 3.92, 4.16, 4.4, 4.64, 4.88, 5.12, 5.36, 5.6, 5.84, 6.08, 6.32, 6.56, 6.8, 7.04, 7.28, 7.52, 7.76, 8, 8.52, 9, 9.48, 9.96, 10.44, 10.92, 11.4, 11.88, 12.36, 13.28, 14.24, 14.72, 15.68, 16.24, 16.64])
        keys.append([[0.00455999, [3, -0.32, 0], [3, 0.12, 0]], [0.00455999, [3, -0.12, 0], [3, 0.146667, 0]], [0.00455999, [3, -0.146667, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0.00152], [3, 0.08, -0.00152]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.173333, 0]], [-0.00455999, [3, -0.173333, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.306667, 0]], [0.638352, [3, -0.306667, 0], [3, 0.32, 0]], [0.638352, [3, -0.32, 0], [3, 0.16, 0]], [-0.639567, [3, -0.16, 0], [3, 0.32, 0]], [-0.639567, [3, -0.32, 0], [3, 0.186667, 0]], [-0.0592826, [3, -0.186667, -0.0614607], [3, 0.133333, 0.0439005]], [-0.0153821, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LAnklePitch") #Jumping movement arms raising one foot
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.091998, [3, -0.32, 0], [3, 0.12, 0]], [0.091998, [3, -0.12, 0], [3, 0.106667, 0]], [0.091998, [3, -0.106667, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.144154, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.146667, 0]], [-0.14364, [3, -0.146667, -0.0263409], [3, 0.133333, 0.0239463]], [-0.119694, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LAnkleRoll") #shrugs the ankle left and stay
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[-0.118076, [3, -0.32, 0], [3, 0.12, 0]], [-0.118076, [3, -0.12, 0], [3, 0.106667, 0]], [-0.118076, [3, -0.106667, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.146667, 0]], [-0.112081, [3, -0.146667, 0.00490736], [3, 0.133333, -0.00446124]], [-0.116542, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LElbowRoll") #Roll left elbow
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[-1.52782, [3, -0.32, 0], [3, 0.12, 0]], [-1.52782, [3, -0.12, 0], [3, 0.133333, 0]], [-1.52782, [3, -0.133333, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, -0.00613659], [3, 0.16, 0.0122732]], [-0.550747, [3, -0.16, -0.260421], [3, 0.08, 0.13021]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.146667, 0]], [-0.401426, [3, -0.146667, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.253333, 0]], [-1.33657, [3, -0.253333, 0.289608], [3, 0.08, -0.0914553]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, -0.185182], [3, 0.12, 0.277773]], [-0.15575, [3, -0.12, -0.108759], [3, 0.133333, 0.120844]], [-0.0349068, [3, -0.133333, 0], [3, 0, 0]]])

        #NO
        names.append("LElbowYaw")  #Movemente of the left arm
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.48, 8.72, 8.96, 9.2, 9.44, 9.68, 9.92, 10.16, 10.4, 10.64, 10.88, 11.12, 11.36, 11.6, 11.84, 12.08, 12.32, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[-0.236277, [3, -0.32, 0], [3, 0.12, 0]], [-0.236277, [3, -0.12, 0], [3, 0.133333, 0]], [-0.236277, [3, -0.133333, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, -0.068528], [3, 0.16, 0.137056]], [0.380475, [3, -0.16, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.173333, 0]], [-0.644027, [3, -0.173333, -0.224168], [3, 0.08, 0.103462]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801319, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.226667, 0]], [0.038455, [3, -0.226667, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.12, 0]], [-1.59015, [3, -0.12, 0.211825], [3, 0.133333, -0.235361]], [-1.82551, [3, -0.133333, 0], [3, 0, 0]]])

        #NO
        names.append("LHand")  #Open left hand
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.00440001, [3, -0.32, 0], [3, 0.12, 0]], [0.00440001, [3, -0.12, 0], [3, 0.106667, 0]], [0.00440001, [3, -0.106667, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.16, 0]], [0.00479996, [3, -0.16, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.173333, 0]], [0.00479996, [3, -0.173333, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.253333, 0]], [0.00479996, [3, -0.253333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, -0.00479996], [3, 0.12, 0.00719994]], [0.875715, [3, -0.12, -0.111496], [3, 0.133333, 0.123885]], [0.9996, [3, -0.133333, 0], [3, 0, 0]]])

        #NO
        names.append("LHipPitch") #NAO jumps in one foot and at the end goes toward back
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.0123138, [3, -0.32, 0], [3, 0.12, 0]], [0.0123138, [3, -0.12, 0], [3, 0.106667, 0]], [0.0123138, [3, -0.106667, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0521979, [3, -0.08, 0], [3, 0.08, 0]], [-0.318285, [3, -0.08, 0], [3, 0.08, 0]], [0.0194225, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.28663, [3, -0.08, 0], [3, 0.08, 0]], [0.129154, [3, -0.08, 0], [3, 0.08, 0]], [-0.31281, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.146667, 0]], [0.397396, [3, -0.146667, -0.0927543], [3, 0.133333, 0.0843221]], [0.481718, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LHipRoll") #shrink left leg and stay
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.112024, [3, -0.32, 0], [3, 0.12, 0]], [0.112024, [3, -0.12, 0], [3, 0.106667, 0]], [0.112024, [3, -0.106667, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0.00306794], [3, 0.08, -0.00306794]], [0.0643861, [3, -0.08, 0.00306812], [3, 0.08, -0.00306812]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, -0.00306812], [3, 0.146667, 0.00562488]], [0.113546, [3, -0.146667, -0.00507515], [3, 0.133333, 0.00461378]], [0.11816, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LHipYawPitch") #slow movement of leg leg and head
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[-0.1733, [3, -0.32, 0], [3, 0.12, 0]], [-0.1733, [3, -0.12, 0], [3, 0.106667, 0]], [-0.1733, [3, -0.106667, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.146667, 0]], [-0.1733, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.1733, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[-0.090548, [3, -0.32, 0], [3, 0.12, 0]], [-0.090548, [3, -0.12, 0], [3, 0.106667, 0]], [-0.090548, [3, -0.106667, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.146667, 0]], [-0.000676226, [3, -0.146667, 0.098859], [3, 0.133333, -0.0898718]], [-0.090548, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.226991, [3, -0.32, 0], [3, 0.12, 0]], [0.226991, [3, -0.12, 0], [3, 0.106667, 0]], [0.226991, [3, -0.106667, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.16, 0]], [-0.730907, [3, -0.16, 0.418252], [3, 0.08, -0.209126]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.173333, 0]], [-0.331613, [3, -0.173333, -0.331211], [3, 0.08, 0.152867]], [0.00878002, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878005, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878005, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878005, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.253333, 0]], [1.53865, [3, -0.253333, -0.00232128], [3, 0.08, 0.000733035]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.12, 0]], [1.73828, [3, -0.12, -0.0259653], [3, 0.133333, 0.0288503]], [1.76713, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.121144, [3, -0.32, 0], [3, 0.12, 0]], [0.121144, [3, -0.12, 0], [3, 0.106667, 0]], [0.121144, [3, -0.106667, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, -0.00613606], [3, 0.16, 0.0122721]], [0.248551, [3, -0.16, -0.0453568], [3, 0.08, 0.0226784]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.173333, 0]], [-0.314159, [3, -0.173333, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.253333, 0]], [0.788697, [3, -0.253333, -0.309947], [3, 0.08, 0.0978781]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0.0505447], [3, 0.12, -0.0758171]], [0.530231, [3, -0.12, 0.0216471], [3, 0.133333, -0.0240524]], [0.506179, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.105804, [3, -0.32, 0], [3, 0.12, 0]], [0.105804, [3, -0.12, 0], [3, 0.106667, 0]], [0.105804, [3, -0.106667, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.16, 0]], [-0.512313, [3, -0.16, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, -0.0993063], [3, 0.173333, 0.215164]], [0.431096, [3, -0.173333, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.253333, 0]], [0.431096, [3, -0.253333, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.12, 0]], [-1.51511, [3, -0.12, 0.253131], [3, 0.133333, -0.281256]], [-1.79636, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.101286, [3, -0.32, 0], [3, 0.12, 0]], [0.101286, [3, -0.12, 0], [3, 0.106667, 0]], [0.101286, [3, -0.106667, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.146667, 0]], [-0.14204, [3, -0.146667, -0.0263601], [3, 0.133333, 0.0239637]], [-0.118076, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.075208, [3, -0.32, 0], [3, 0.12, 0]], [0.075208, [3, -0.12, 0], [3, 0.106667, 0]], [0.075208, [3, -0.106667, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, -0.00153397], [3, 0.08, 0.00153397]], [0.116542, [3, -0.08, -0.00153397], [3, 0.08, 0.00153397]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0.00153397], [3, 0.146667, -0.00281228]], [0.0776441, [3, -0.146667, 0.00436711], [3, 0.133333, -0.0039701]], [0.073674, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.349794, [3, -0.32, 0], [3, 0.12, 0]], [0.349794, [3, -0.12, 0], [3, 0.133333, 0]], [0.349794, [3, -0.133333, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, -0.13021], [3, 0.16, 0.260421]], [1.52169, [3, -0.16, -0.0122732], [3, 0.08, 0.00613659]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.133333, 0]], [0.401426, [3, -0.133333, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.266667, 0]], [1.33276, [3, -0.266667, -0.292702], [3, 0.08, 0.0878106]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0.182939], [3, 0.12, -0.274408]], [0.170923, [3, -0.12, 0.106852], [3, 0.133333, -0.118725]], [0.0521979, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.44, 8.68, 8.92, 9.16, 9.4, 9.64, 9.88, 10.12, 10.36, 10.6, 10.84, 11.08, 11.32, 11.56, 11.8, 12.04, 12.28, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[1.06302, [3, -0.32, 0], [3, 0.12, 0]], [1.06302, [3, -0.12, 0], [3, 0.133333, 0]], [1.06302, [3, -0.133333, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.16, 0]], [0.145772, [3, -0.16, -0.137056], [3, 0.08, 0.068528]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, -0.0553616], [3, 0.16, 0.110723]], [0.644027, [3, -0.16, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.24, 0]], [-0.0384695, [3, -0.24, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.12, 0]], [1.59007, [3, -0.12, -0.211814], [3, 0.133333, 0.235349]], [1.82542, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.00479996, [3, -0.32, 0], [3, 0.12, 0]], [0.00479996, [3, -0.12, 0], [3, 0.106667, 0]], [0.00479996, [3, -0.106667, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.16, 0]], [0.00440001, [3, -0.16, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.16, 0]], [0.00440001, [3, -0.16, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.266667, 0]], [0.00440001, [3, -0.266667, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, -0.00440001], [3, 0.12, 0.00660002]], [0.875526, [3, -0.12, -0.111667], [3, 0.133333, 0.124074]], [0.9996, [3, -0.133333, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def cow_movement_2(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch") #Movement of the head up-down
        times.append([0.96, 1.32, 1.76, 2, 2.24, 2.48, 2.72, 2.96, 3.2, 3.44, 3.68, 3.92, 4.16, 4.4, 4.64, 4.88, 5.12, 5.36, 5.6, 5.84, 6.08, 6.32, 6.56, 6.8, 7.04, 7.28, 7.52, 7.76, 8, 8.52, 8.76, 9, 9.24, 9.48, 9.72, 9.96, 10.2, 10.44, 10.68, 10.92, 11.16, 11.4, 11.64, 11.88, 12.12, 12.36, 12.72, 13.04, 13.28, 13.52, 13.76, 14, 14.24, 14.48, 14.72, 14.96, 15.2, 15.44, 15.68, 15.92, 16.24, 16.64])
        keys.append([[-0.392746, [3, -0.32, 0], [3, 0.12, 0]], [-0.392746, [3, -0.12, 0], [3, 0.146667, 0]], [-0.392746, [3, -0.146667, 0], [3, 0.08, 0]], [-0.105767, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105767, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.105777, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.173333, 0]], [-0.392746, [3, -0.173333, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.155334, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.12, 0]], [-0.0808051, [3, -0.12, -0.0668442], [3, 0.106667, 0.059417]], [-0.0139626, [3, -0.106667, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.08, 0]], [-0.392746, [3, -0.08, 0], [3, 0.08, 0]], [-0.0139626, [3, -0.08, 0], [3, 0.106667, 0]], [-0.375714, [3, -0.106667, 0.0470987], [3, 0.133333, -0.0588734]], [-0.434587, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("HeadYaw") #Movement of the head right-left
        times.append([0.96, 1.32, 1.76, 2, 2.24, 2.48, 2.72, 2.96, 3.2, 3.44, 3.68, 3.92, 4.16, 4.4, 4.64, 4.88, 5.12, 5.36, 5.6, 5.84, 6.08, 6.32, 6.56, 6.8, 7.04, 7.28, 7.52, 7.76, 8, 8.52, 9, 9.48, 9.96, 10.44, 10.92, 11.4, 11.88, 12.36, 13.28, 14.24, 14.72, 15.68, 16.24, 16.64])
        keys.append([[0.00455999, [3, -0.32, 0], [3, 0.12, 0]], [0.00455999, [3, -0.12, 0], [3, 0.146667, 0]], [0.00455999, [3, -0.146667, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [-0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0.00152], [3, 0.08, -0.00152]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.08, 0]], [0.00157595, [3, -0.08, 0], [3, 0.08, 0]], [-0.00455999, [3, -0.08, 0], [3, 0.173333, 0]], [-0.00455999, [3, -0.173333, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.16, 0]], [-0.00455999, [3, -0.16, 0], [3, 0.306667, 0]], [0.638352, [3, -0.306667, 0], [3, 0.32, 0]], [0.638352, [3, -0.32, 0], [3, 0.16, 0]], [-0.639567, [3, -0.16, 0], [3, 0.32, 0]], [-0.639567, [3, -0.32, 0], [3, 0.186667, 0]], [-0.0592826, [3, -0.186667, -0.0614607], [3, 0.133333, 0.0439005]], [-0.0153821, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LAnklePitch") #Jumping movement arms raising one foot
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.091998, [3, -0.32, 0], [3, 0.12, 0]], [0.091998, [3, -0.12, 0], [3, 0.106667, 0]], [0.091998, [3, -0.106667, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.144154, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.146667, 0]], [-0.14364, [3, -0.146667, -0.0263409], [3, 0.133333, 0.0239463]], [-0.119694, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LAnkleRoll") #shrugs the ankle left and stay
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[-0.118076, [3, -0.32, 0], [3, 0.12, 0]], [-0.118076, [3, -0.12, 0], [3, 0.106667, 0]], [-0.118076, [3, -0.106667, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.116542, [3, -0.08, 0], [3, 0.08, 0]], [-0.118076, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.08, 0]], [-0.075208, [3, -0.08, 0], [3, 0.08, 0]], [-0.073674, [3, -0.08, 0], [3, 0.146667, 0]], [-0.112081, [3, -0.146667, 0.00490736], [3, 0.133333, -0.00446124]], [-0.116542, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LElbowRoll") #Roll left elbow
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[-1.52782, [3, -0.32, 0], [3, 0.12, 0]], [-1.52782, [3, -0.12, 0], [3, 0.133333, 0]], [-1.52782, [3, -0.133333, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, 0], [3, 0.08, 0]], [-1.52782, [3, -0.08, 0], [3, 0.08, 0]], [-1.52169, [3, -0.08, -0.00613659], [3, 0.16, 0.0122732]], [-0.550747, [3, -0.16, -0.260421], [3, 0.08, 0.13021]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.08, 0]], [-0.550747, [3, -0.08, 0], [3, 0.08, 0]], [-0.349794, [3, -0.08, 0], [3, 0.146667, 0]], [-0.401426, [3, -0.146667, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.08, 0]], [-0.401426, [3, -0.08, 0], [3, 0.253333, 0]], [-1.33657, [3, -0.253333, 0.289608], [3, 0.08, -0.0914553]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, 0], [3, 0.08, 0]], [-1.54462, [3, -0.08, 0], [3, 0.08, 0]], [-1.33657, [3, -0.08, -0.185182], [3, 0.12, 0.277773]], [-0.15575, [3, -0.12, -0.108759], [3, 0.133333, 0.120844]], [-0.0349068, [3, -0.133333, 0], [3, 0, 0]]])

        #NO
        names.append("LElbowYaw")  #Movemente of the left arm
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.48, 8.72, 8.96, 9.2, 9.44, 9.68, 9.92, 10.16, 10.4, 10.64, 10.88, 11.12, 11.36, 11.6, 11.84, 12.08, 12.32, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[-0.236277, [3, -0.32, 0], [3, 0.12, 0]], [-0.236277, [3, -0.12, 0], [3, 0.133333, 0]], [-0.236277, [3, -0.133333, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, -0.068528], [3, 0.16, 0.137056]], [0.380475, [3, -0.16, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.173333, 0]], [-0.644027, [3, -0.173333, -0.224168], [3, 0.08, 0.103462]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801319, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.226667, 0]], [0.038455, [3, -0.226667, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.12, 0]], [-1.59015, [3, -0.12, 0.211825], [3, 0.133333, -0.235361]], [-1.82551, [3, -0.133333, 0], [3, 0, 0]]])

        #NO
        names.append("LHand")  #Open left hand
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.00440001, [3, -0.32, 0], [3, 0.12, 0]], [0.00440001, [3, -0.12, 0], [3, 0.106667, 0]], [0.00440001, [3, -0.106667, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.16, 0]], [0.00479996, [3, -0.16, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.173333, 0]], [0.00479996, [3, -0.173333, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.253333, 0]], [0.00479996, [3, -0.253333, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, -0.00479996], [3, 0.12, 0.00719994]], [0.875715, [3, -0.12, -0.111496], [3, 0.133333, 0.123885]], [0.9996, [3, -0.133333, 0], [3, 0, 0]]])

        #NO
        names.append("LHipPitch") #NAO jumps in one foot and at the end goes toward back
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.0123138, [3, -0.32, 0], [3, 0.12, 0]], [0.0123138, [3, -0.12, 0], [3, 0.106667, 0]], [0.0123138, [3, -0.106667, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0123138, [3, -0.08, 0], [3, 0.08, 0]], [-0.358915, [3, -0.08, 0], [3, 0.08, 0]], [0.0521979, [3, -0.08, 0], [3, 0.08, 0]], [-0.318285, [3, -0.08, 0], [3, 0.08, 0]], [0.0194225, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.0106959, [3, -0.08, 0], [3, 0.08, 0]], [-0.334564, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.26045, [3, -0.08, 0], [3, 0.08, 0]], [0.109956, [3, -0.08, 0], [3, 0.08, 0]], [-0.28663, [3, -0.08, 0], [3, 0.08, 0]], [0.129154, [3, -0.08, 0], [3, 0.08, 0]], [-0.31281, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.08, 0]], [0.0541052, [3, -0.08, 0], [3, 0.08, 0]], [-0.328518, [3, -0.08, 0], [3, 0.146667, 0]], [0.397396, [3, -0.146667, -0.0927543], [3, 0.133333, 0.0843221]], [0.481718, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LHipRoll") #shrink left leg and stay
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.112024, [3, -0.32, 0], [3, 0.12, 0]], [0.112024, [3, -0.12, 0], [3, 0.106667, 0]], [0.112024, [3, -0.106667, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0], [3, 0.08, 0]], [0.115092, [3, -0.08, 0], [3, 0.08, 0]], [0.112024, [3, -0.08, 0.00306794], [3, 0.08, -0.00306794]], [0.0643861, [3, -0.08, 0.00306812], [3, 0.08, -0.00306812]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, 0], [3, 0.08, 0]], [0.061318, [3, -0.08, 0], [3, 0.08, 0]], [0.0643861, [3, -0.08, -0.00306812], [3, 0.146667, 0.00562488]], [0.113546, [3, -0.146667, -0.00507515], [3, 0.133333, 0.00461378]], [0.11816, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LHipYawPitch") #slow movement of leg leg and head
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[-0.1733, [3, -0.32, 0], [3, 0.12, 0]], [-0.1733, [3, -0.12, 0], [3, 0.106667, 0]], [-0.1733, [3, -0.106667, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.08, 0]], [-0.1733, [3, -0.08, 0], [3, 0.146667, 0]], [-0.1733, [3, -0.146667, 0], [3, 0.133333, 0]], [-0.1733, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[-0.090548, [3, -0.32, 0], [3, 0.12, 0]], [-0.090548, [3, -0.12, 0], [3, 0.106667, 0]], [-0.090548, [3, -0.106667, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.771402, [3, -0.08, 0], [3, 0.08, 0]], [-0.090548, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.08, 0]], [-0.0923279, [3, -0.08, 0], [3, 0.08, 0]], [0.77302, [3, -0.08, 0], [3, 0.146667, 0]], [-0.000676226, [3, -0.146667, 0.098859], [3, 0.133333, -0.0898718]], [-0.090548, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.226991, [3, -0.32, 0], [3, 0.12, 0]], [0.226991, [3, -0.12, 0], [3, 0.106667, 0]], [0.226991, [3, -0.106667, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.08, 0]], [0.226991, [3, -0.08, 0], [3, 0.08, 0]], [0.438682, [3, -0.08, 0], [3, 0.16, 0]], [-0.730907, [3, -0.16, 0.418252], [3, 0.08, -0.209126]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.08, 0]], [-1.03006, [3, -0.08, 0], [3, 0.08, 0]], [-1.44345, [3, -0.08, 0], [3, 0.173333, 0]], [-0.331613, [3, -0.173333, -0.331211], [3, 0.08, 0.152867]], [0.00878002, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878005, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878005, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878005, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.08, 0]], [0.00878, [3, -0.08, 0], [3, 0.08, 0]], [-0.331613, [3, -0.08, 0], [3, 0.253333, 0]], [1.53865, [3, -0.253333, -0.00232128], [3, 0.08, 0.000733035]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.08, 0]], [1.53938, [3, -0.08, 0], [3, 0.08, 0]], [1.53865, [3, -0.08, 0], [3, 0.12, 0]], [1.73828, [3, -0.12, -0.0259653], [3, 0.133333, 0.0288503]], [1.76713, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.121144, [3, -0.32, 0], [3, 0.12, 0]], [0.121144, [3, -0.12, 0], [3, 0.106667, 0]], [0.121144, [3, -0.106667, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, 0], [3, 0.08, 0]], [0.121144, [3, -0.08, 0], [3, 0.08, 0]], [0.12728, [3, -0.08, -0.00613606], [3, 0.16, 0.0122721]], [0.248551, [3, -0.16, -0.0453568], [3, 0.08, 0.0226784]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.08, 0]], [0.248551, [3, -0.08, 0], [3, 0.08, 0]], [0.331386, [3, -0.08, 0], [3, 0.173333, 0]], [-0.314159, [3, -0.173333, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.08, 0]], [-0.314159, [3, -0.08, 0], [3, 0.253333, 0]], [0.788697, [3, -0.253333, -0.309947], [3, 0.08, 0.0978781]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0], [3, 0.08, 0]], [0.909316, [3, -0.08, 0], [3, 0.08, 0]], [0.788697, [3, -0.08, 0.0505447], [3, 0.12, -0.0758171]], [0.530231, [3, -0.12, 0.0216471], [3, 0.133333, -0.0240524]], [0.506179, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.4, 8.64, 8.88, 9.12, 9.36, 9.6, 9.84, 10.08, 10.32, 10.56, 10.8, 11.04, 11.28, 11.52, 11.76, 12, 12.24, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.105804, [3, -0.32, 0], [3, 0.12, 0]], [0.105804, [3, -0.12, 0], [3, 0.106667, 0]], [0.105804, [3, -0.106667, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.08, 0]], [0.105804, [3, -0.08, 0], [3, 0.08, 0]], [0.107338, [3, -0.08, 0], [3, 0.16, 0]], [-0.512313, [3, -0.16, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, 0], [3, 0.08, 0]], [-0.512313, [3, -0.08, 0], [3, 0.08, 0]], [-0.115008, [3, -0.08, -0.0993063], [3, 0.173333, 0.215164]], [0.431096, [3, -0.173333, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.253333, 0]], [0.431096, [3, -0.253333, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.08, 0]], [0.431096, [3, -0.08, 0], [3, 0.12, 0]], [-1.51511, [3, -0.12, 0.253131], [3, 0.133333, -0.281256]], [-1.79636, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.101286, [3, -0.32, 0], [3, 0.12, 0]], [0.101286, [3, -0.12, 0], [3, 0.106667, 0]], [0.101286, [3, -0.106667, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.101286, [3, -0.08, 0], [3, 0.08, 0]], [-0.34979, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.08, 0]], [0.091998, [3, -0.08, 0], [3, 0.08, 0]], [-0.34834, [3, -0.08, 0], [3, 0.146667, 0]], [-0.14204, [3, -0.146667, -0.0263601], [3, 0.133333, 0.0239637]], [-0.118076, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.52, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.12, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 12.44, 12.68, 12.92, 13.16, 13.4, 13.64, 13.88, 14.12, 14.36, 14.6, 14.84, 15.08, 15.32, 15.56, 15.8, 16.24, 16.64])
        keys.append([[0.075208, [3, -0.32, 0], [3, 0.12, 0]], [0.075208, [3, -0.12, 0], [3, 0.106667, 0]], [0.075208, [3, -0.106667, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, 0], [3, 0.08, 0]], [0.073674, [3, -0.08, 0], [3, 0.08, 0]], [0.075208, [3, -0.08, -0.00153397], [3, 0.08, 0.00153397]], [0.116542, [3, -0.08, -0.00153397], [3, 0.08, 0.00153397]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0], [3, 0.08, 0]], [0.118076, [3, -0.08, 0], [3, 0.08, 0]], [0.116542, [3, -0.08, 0.00153397], [3, 0.146667, -0.00281228]], [0.0776441, [3, -0.146667, 0.00436711], [3, 0.133333, -0.0039701]], [0.073674, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.349794, [3, -0.32, 0], [3, 0.12, 0]], [0.349794, [3, -0.12, 0], [3, 0.133333, 0]], [0.349794, [3, -0.133333, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, 0], [3, 0.08, 0]], [0.349794, [3, -0.08, 0], [3, 0.08, 0]], [0.550747, [3, -0.08, -0.13021], [3, 0.16, 0.260421]], [1.52169, [3, -0.16, -0.0122732], [3, 0.08, 0.00613659]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.08, 0]], [1.52169, [3, -0.08, 0], [3, 0.08, 0]], [1.52782, [3, -0.08, 0], [3, 0.133333, 0]], [0.401426, [3, -0.133333, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.08, 0]], [0.401426, [3, -0.08, 0], [3, 0.266667, 0]], [1.33276, [3, -0.266667, -0.292702], [3, 0.08, 0.0878106]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0], [3, 0.08, 0]], [1.54296, [3, -0.08, 0], [3, 0.08, 0]], [1.33276, [3, -0.08, 0.182939], [3, 0.12, -0.274408]], [0.170923, [3, -0.12, 0.106852], [3, 0.133333, -0.118725]], [0.0521979, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36, 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.44, 8.68, 8.92, 9.16, 9.4, 9.64, 9.88, 10.12, 10.36, 10.6, 10.84, 11.08, 11.32, 11.56, 11.8, 12.04, 12.28, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[1.06302, [3, -0.32, 0], [3, 0.12, 0]], [1.06302, [3, -0.12, 0], [3, 0.133333, 0]], [1.06302, [3, -0.133333, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.08, 0]], [1.06302, [3, -0.08, 0], [3, 0.08, 0]], [-0.380475, [3, -0.08, 0], [3, 0.16, 0]], [0.145772, [3, -0.16, -0.137056], [3, 0.08, 0.068528]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, 0], [3, 0.08, 0]], [0.145772, [3, -0.08, 0], [3, 0.08, 0]], [0.236277, [3, -0.08, -0.0553616], [3, 0.16, 0.110723]], [0.644027, [3, -0.16, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.08, 0]], [0.0797858, [3, -0.08, 0], [3, 0.08, 0]], [0.644027, [3, -0.08, 0], [3, 0.24, 0]], [-0.0384695, [3, -0.24, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.08, 0]], [-0.0377698, [3, -0.08, 0], [3, 0.08, 0]], [-0.0384695, [3, -0.08, 0], [3, 0.12, 0]], [1.59007, [3, -0.12, -0.211814], [3, 0.133333, 0.235349]], [1.82542, [3, -0.133333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.96, 1.32, 1.64, 1.88, 2.12, 2.36, 2.6, 2.84, 3.08, 3.32, 3.56, 3.8, 4.04, 4.28, 4.76, 5, 5.24, 5.48, 5.72, 5.96, 6.2, 6.44, 6.68, 6.92, 7.16, 7.4, 7.64, 7.88, 8.36, 8.6, 8.84, 9.08, 9.32, 9.56, 9.8, 10.04, 10.28, 10.52, 10.76, 11, 11.24, 11.48, 11.72, 11.96, 12.2, 13, 13.24, 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[0.00479996, [3, -0.32, 0], [3, 0.12, 0]], [0.00479996, [3, -0.12, 0], [3, 0.106667, 0]], [0.00479996, [3, -0.106667, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.08, 0]], [0.00479996, [3, -0.08, 0], [3, 0.16, 0]], [0.00440001, [3, -0.16, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.16, 0]], [0.00440001, [3, -0.16, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.266667, 0]], [0.00440001, [3, -0.266667, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, 0], [3, 0.08, 0]], [0, [3, -0.08, 0], [3, 0.08, 0]], [0.00440001, [3, -0.08, -0.00440001], [3, 0.12, 0.00660002]], [0.875526, [3, -0.12, -0.111667], [3, 0.133333, 0.124074]], [0.9996, [3, -0.133333, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)


    def test(self):
        names = list()
        times = list()
        keys = list()
        names.append("LElbowYaw")  # Movemente of the left arm
        times.append([0.96, 1.32, 1.72, 1.96, 2.2, 2.44, 2.68, 2.92, 3.16, 3.4, 3.64, 3.88, 4.12, 4.36
                         , 4.84, 5.08, 5.32, 5.56, 5.8, 6.04, 6.28, 6.52, 6.76, 7, 7.24, 7.48, 7.72, 7.96, 8.48, 8.72,
                      8.96
                         , 9.2, 9.44, 9.68, 9.92, 10.16, 10.4, 10.64, 10.88, 11.12, 11.36, 11.6, 11.84, 12.08, 12.32,
                      13, 13.24
                         , 13.48, 13.72, 13.96, 14.2, 14.44, 14.68, 14.92, 15.16, 15.4, 15.64, 15.88, 16.24, 16.64])
        keys.append([[-0.236277, [3, -0.32, 0], [3, 0.12, 0]], [-0.236277, [3, -0.12, 0], [3, 0.133333, 0]]
                        , [-0.236277, [3, -0.133333, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.236277, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.145772, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.236277, [3, -0.08, 0], [3, 0.08, 0]], [-0.145772, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.236277, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.145772, [3, -0.08, 0], [3, 0.08, 0]], [-0.236277, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.145772, [3, -0.08, -0.068528], [3, 0.16, 0.137056]]
                        , [0.380475, [3, -0.16, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]],
                     [0.380475, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]],
                     [-1.06302, [3, -0.08, 0], [3, 0.08, 0]]
                        , [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.08, 0]],
                     [0.380475, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-1.06302, [3, -0.08, 0], [3, 0.08, 0]], [0.380475, [3, -0.08, 0], [3, 0.08, 0]],
                     [-1.06302, [3, -0.08, 0], [3, 0.08, 0]]
                        , [0.380475, [3, -0.08, 0], [3, 0.08, 0]], [-1.06302, [3, -0.08, 0], [3, 0.173333, 0]],
                     [-0.644027, [3, -0.173333, -0.224168]
                         , [3, 0.08, 0.103462]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.644027, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.644027, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.0801319, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.644027, [3, -0.08, 0], [3, 0.08, 0]], [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]],
                     [-0.644027, [3, -0.08, 0], [3, 0.08, 0]]
                        , [-0.0801321, [3, -0.08, 0], [3, 0.08, 0]], [-0.644027, [3, -0.08, 0], [3, 0.226667, 0]],
                     [0.038455, [3, -0.226667, 0], [3, 0.08, 0]]
                        , [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]],
                     [0.0383972, [3, -0.08, 0], [3, 0.08, 0]]
                        , [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]],
                     [0.038455, [3, -0.08, 0], [3, 0.08, 0]]
                        , [0.0383972, [3, -0.08, 0], [3, 0.08, 0]], [0.038455, [3, -0.08, 0], [3, 0.08, 0]],
                     [0.0383972, [3, -0.08, 0], [3, 0.08, 0]]
                        , [0.038455, [3, -0.08, 0], [3, 0.08, 0]], [0.0383972, [3, -0.08, 0], [3, 0.08, 0]],
                     [0.038455, [3, -0.08, 0], [3, 0.12, 0]]
                        , [-1.59015, [3, -0.12, 0.211825], [3, 0.133333, -0.235361]],
                     [-1.82551, [3, -0.133333, 0], [3, 0, 0]]])

    def venia_final(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([2])
        keys.append([[-0.0245859, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([2])
        keys.append([[0.00609404, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([2])
        keys.append([[-0.104485, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([2])
        keys.append([[0.0092244, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([2])
        keys.append([[-0.326699, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([2])
        keys.append([[-0.759372, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([2])
        keys.append([[0.918933, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([2])
        keys.append([[0.0596046, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([2])
        keys.append([[-0.0324061, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([2])
        keys.append([[0.0183645, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([2])
        keys.append([[0.0702441, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([2])
        keys.append([[1.56771, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([2])
        keys.append([[0.329768, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([2])
        keys.append([[-1.02629, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([2])
        keys.append([[-0.0951351, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([2])
        keys.append([[-0.00302827, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([2])
        keys.append([[0.291501, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([2])
        keys.append([[0.77923, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([2])
        keys.append([[0.918205, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([2])
        keys.append([[0.0367591, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([2])
        keys.append([[0.0107584, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([2])
        keys.append([[0.0839559, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([2])
        keys.append([[1.56779, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([2])
        keys.append([[-0.320648, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([2])
        keys.append([[0.967912, [3, -0.666667, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def send_kisses(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([1, 2.33333, 3.4])
        keys.append([[-0.01078, [3, -0.333333, 0], [3, 0.444444, 0]], [-0.01078, [3, -0.444444, 0], [3, 0.355556, 0]],
                     [-0.112024, [3, -0.355556, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([1, 2.33333, 3.4])
        keys.append([[0.010696, [3, -0.333333, 0], [3, 0.444444, 0]], [0.010696, [3, -0.444444, 0], [3, 0.355556, 0]],
                     [0.338973, [3, -0.355556, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([1.2])
        keys.append([[-0.359129, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([1.2])
        keys.append([[-0.0797476, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[-1.56617, [3, -0.333333, 0], [3, 0.222222, 0]], [-0.658043, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [-1.56617, [3, -0.222222, 0], [3, 0.177778, 0]],
                     [-0.658043, [3, -0.177778, -0.210158], [3, 0.177778, 0.210158]],
                     [-0.305225, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[-0.624379, [3, -0.333333, 0], [3, 0.222222, 0]], [-1.26866, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [-0.624379, [3, -0.222222, 0], [3, 0.177778, 0]],
                     [-1.26866, [3, -0.177778, 0.242373], [3, 0.177778, -0.242373]],
                     [-2.07862, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[0.917114, [3, -0.333333, 0], [3, 0.222222, 0]], [1, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [0.917114, [3, -0.222222, 0], [3, 0.177778, 0]], [1, [3, -0.177778, 0], [3, 0.177778, 0]],
                     [0.997478, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([1.2])
        keys.append([[-0.27941, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([1.2])
        keys.append([[0.168548, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([1.2])
        keys.append([[-0.170318, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([1.2])
        keys.append([[0.680776, [3, -0.4, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[0.496974, [3, -0.333333, 0], [3, 0.222222, 0]], [0.225456, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [0.496974, [3, -0.222222, 0], [3, 0.177778, 0]], [0.225456, [3, -0.177778, 0], [3, 0.177778, 0]],
                     [0.4034, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[0, [3, -0.333333, 0], [3, 0.222222, 0]], [0.05058, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [0, [3, -0.222222, 0], [3, 0.177778, 0]],
                     [0.05058, [3, -0.177778, -0.05058], [3, 0.177778, 0.05058]],
                     [0.77923, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[-1.00941, [3, -0.333333, 0], [3, 0.222222, 0]], [-1.00941, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [-1.00941, [3, -0.222222, 0], [3, 0.177778, 0]], [-1.00941, [3, -0.177778, 0], [3, 0.177778, 0]],
                     [-1.01095, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([1.2])
        keys.append([[-0.184108, [3, -0.4, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([1.2])
        keys.append([[0.0675357, [3, -0.4, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[0.504728, [3, -0.333333, 0], [3, 0.222222, 0]], [0.431096, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [0.504728, [3, -0.222222, 0], [3, 0.177778, 0]], [0.431096, [3, -0.177778, 0], [3, 0.177778, 0]],
                     [0.596768, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[0.42641, [3, -0.333333, 0], [3, 0.222222, 0]], [0.41107, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [0.42641, [3, -0.222222, 0], [3, 0.177778, 0]],
                     [0.41107, [3, -0.177778, 0.0153397], [3, 0.177778, -0.0153397]],
                     [0.196309, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([1, 2.33333, 3.4])
        keys.append([[0.630909, [3, -0.333333, 0], [3, 0.444444, 0]], [0.630909, [3, -0.444444, 0], [3, 0.355556, 0]],
                     [0.572727, [3, -0.355556, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([1.2])
        keys.append([[-0.336004, [3, -0.4, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([1.2])
        keys.append([[0.0015544, [3, -0.4, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([1.2])
        keys.append([[0.556428, [3, -0.4, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[1.14441, [3, -0.333333, 0], [3, 0.222222, 0]], [1.10912, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [1.14441, [3, -0.222222, 0], [3, 0.177778, 0]], [1.10912, [3, -0.177778, 0], [3, 0.177778, 0]],
                     [1.27173, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([1, 1.66667, 2.33333, 2.86667, 3.4])
        keys.append([[-0.271559, [3, -0.333333, 0], [3, 0.222222, 0]], [-0.253151, [3, -0.222222, 0], [3, 0.222222, 0]],
                     [-0.271559, [3, -0.222222, 0], [3, 0.177778, 0]], [-0.253151, [3, -0.177778, 0], [3, 0.177778, 0]],
                     [-0.579894, [3, -0.177778, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([1, 2.33333, 3.4])
        keys.append([[0.958708, [3, -0.333333, 0], [3, 0.444444, 0]], [0.958708, [3, -0.444444, 0], [3, 0.355556, 0]],
                     [0.944902, [3, -0.355556, 0], [3, 0, 0]]])
        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def venia(self):
        names = list()
        times = list()
        keys = list()
        names.append("LAnklePitch")
        times.append([0.933333, 3])
        keys.append([[-0.121359, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.409751, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([0.933333, 3])
        keys.append([[0.0153604, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.116564, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([[-0.306757, [3, -0.311111, 0], [3, 0.688889, 0]], [-1.30539, [3, -0.688889, 0], [3, 0.511111, 0]], [-0.306757, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([[-0.12583, [3, -0.311111, 0], [3, 0.688889, 0]], [0.469363, [3, -0.688889, 0], [3, 0.511111, 0]], [-0.12583, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.933333, 3, 4.53333])
        keys.append([[0.924024, [3, -0.311111, 0], [3, 0.688889, 0]], [0.924024, [3, -0.688889, 0], [3, 0.511111, 0]], [0.924024, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.933333, 3])
        keys.append([[0.0749446, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.761086, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.933333, 3])
        keys.append([[-0.0477461, [3, -0.311111, 0], [3, 0.688889, 0]], [0.028954, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.933333, 3])
        keys.append([[0.0291025, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.319116, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.933333, 3])
        keys.append([[0.0855841, [3, -0.311111, 0], [3, 0.688889, 0]], [1.0474, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.933333, 3, 4.53333])
        keys.append([[2.0417, [3, -0.311111, 0], [3, 0.688889, 0]], [2.06319, [3, -0.688889, 0], [3, 0.511111, 0]], [2.0417, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([[0.417205, [3, -0.311111, 0], [3, 0.688889, 0]], [0.246933, [3, -0.688889, 0], [3, 0.511111, 0]], [0.417205, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([[-0.998676, [3, -0.311111, 0], [3, 0.688889, 0]], [-1.01708, [3, -0.688889, 0], [3, 0.511111, 0]], [-0.998676, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.933333, 3])
        keys.append([[-0.102805, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.543063, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.933333, 3])
        keys.append([[-0.00456227, [3, -0.311111, 0], [3, 0.688889, 0]], [0.135032, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([[0.435699, [3, -0.311111, 0], [3, 0.688889, 0]], [1.27786, [3, -0.688889, 0], [3, 0.511111, 0]], [0.435699, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([[0.222388, [3, -0.311111, 0], [3, 0.688889, 0]], [0.374254, [3, -0.688889, 0], [3, 0.511111, 0]], [0.222388, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.933333, 3, 4.53333])
        keys.append([[0.917842, [3, -0.311111, 0], [3, 0.688889, 0]], [0.469091, [3, -0.688889, 0], [3, 0.511111, 0]], [0.917842, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.933333, 3])
        keys.append([[0.041361, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.65354, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.933333, 3])
        keys.append([[0.0168944, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.0444656, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.933333, 3])
        keys.append([[0.103898, [3, -0.311111, 0], [3, 0.688889, 0]], [1.03657, [3, -0.688889, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.933333, 3, 4.53333])
        keys.append([[1.06617, [3, -0.311111, 0], [3, 0.688889, 0]], [0.943452, [3, -0.688889, 0], [3, 0.511111, 0]], [1.06617, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.933333, 3, 4.53333])
        keys.append([[-0.398883, [3, -0.311111, 0], [3, 0.688889, 0]], [-0.0429939, [3, -0.688889, 0], [3, 0.511111, 0]], [-0.398883, [3, -0.511111, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.933333, 3, 4.53333])
        keys.append([[0.949504, [3, -0.311111, 0], [3, 0.688889, 0]], [0.964844, [3, -0.688889, 0], [3, 0.511111, 0]], [0.949504, [3, -0.511111, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)
        self.venia_final()
        self.send_kisses()
        self.crouch()

    def arms_up(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([14.76, 15.28, 15.76, 16.28, 16.76, 17.28])
        keys.append([[-0.0782759, [3, -4.92, 0], [3, 0.173333, 0]], [-0.50166, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.0782759, [3, -0.16, 0], [3, 0.173333, 0]], [-0.50166, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.0782759, [3, -0.16, 0], [3, 0.173333, 0]], [-0.50166, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([14.76, 15.28, 15.76, 16.28, 16.76, 17.28])
        keys.append([[-0.0859459, [3, -4.92, 0], [3, 0.173333, 0]], [-0.0706059, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.0859459, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0706059, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.0859459, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0706059, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[-0.0910584, [3, -4.94667, 0], [3, 0.333333, 0]], [-0.298148, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [-0.298148, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([14.84, 15.84, 17.36])
        keys.append([[-0.0329368, [3, -4.94667, 0], [3, 0.333333, 0]], [0.0192192, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [0.0192192, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[0, [3, -4.93333, 0], [3, 0.173333, 0]], [-0.612024, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0, [3, -0.16, 0], [3, 0.173333, 0]], [-0.612024, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0, [3, -0.16, 0], [3, 0.173333, 0]], [-0.612024, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[-0.420357, [3, -4.93333, 0], [3, 0.173333, 0]], [-0.374338, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.420357, [3, -0.16, 0], [3, 0.173333, 0]], [-0.374338, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.420357, [3, -0.16, 0], [3, 0.173333, 0]], [-0.374338, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([15.24, 17.24])
        keys.append([[0.796751, [3, -5.08, 0], [3, 0.666667, 0]], [0.796751, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[0.340577, [3, -4.94667, 0], [3, 0.333333, 0]], [0.25774, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [0.25774, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([14.84, 15.84, 17.36])
        keys.append([[0.090152, [3, -4.94667, 0], [3, 0.333333, 0]], [0.0671419, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [0.0671419, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[-0.360449, [3, -4.94667, 0], [3, 0.333333, 0]], [-0.384992, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [-0.384992, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[0.0714636, [3, -4.94667, 0], [3, 0.333333, 0]], [0.405876, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [0.405876, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[-1.05237, [3, -4.93333, 0], [3, 0.173333, 0]], [-0.823801, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.05237, [3, -0.16, 0], [3, 0.173333, 0]], [-0.823801, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.05237, [3, -0.16, 0], [3, 0.173333, 0]], [-0.823801, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[0.432547, [3, -4.93333, 0], [3, 0.173333, 0]], [0.0352401, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0.432547, [3, -0.16, 0], [3, 0.173333, 0]], [0.0352401, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0.432547, [3, -0.16, 0], [3, 0.173333, 0]], [0.0352401, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([15.24, 17.24])
        keys.append([[-1.30394, [3, -5.08, 0], [3, 0.666667, 0]], [-1.30394, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[-0.0787807, [3, -4.94667, 0], [3, 0.333333, 0]], [-0.292008, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [-0.292008, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([14.84, 15.84, 17.36])
        keys.append([[0.165806, [3, -4.94667, 0], [3, 0.333333, 0]],
                     [0.0680678, [3, -0.333333, 0.0080377], [3, 0.506667, -0.0122173]],
                     [0.0558505, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[4.19617e-05, [3, -4.93333, 0], [3, 0.173333, 0]], [0.656595, [3, -0.173333, 0], [3, 0.16, 0]],
                     [4.19617e-05, [3, -0.16, 0], [3, 0.173333, 0]], [0.656595, [3, -0.173333, 0], [3, 0.16, 0]],
                     [4.19617e-05, [3, -0.16, 0], [3, 0.173333, 0]], [0.656595, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[0.233125, [3, -4.93333, 0], [3, 0.173333, 0]], [0.170232, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0.233125, [3, -0.16, 0], [3, 0.173333, 0]], [0.170232, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0.233125, [3, -0.16, 0], [3, 0.173333, 0]], [0.170232, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([15.24, 17.24])
        keys.append([[0.849115, [3, -5.08, 0], [3, 0.666667, 0]], [0.849115, [3, -0.666667, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[0.355635, [3, -4.94667, 0], [3, 0.333333, 0]], [0.26973, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [0.26973, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([14.84, 15.84, 17.36])
        keys.append([[-0.119116, [3, -4.94667, 0], [3, 0.333333, 0]], [-0.0853684, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [-0.0853684, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([14.84, 15.84, 17.36])
        keys.append([[0.0476684, [3, -4.94667, 0], [3, 0.333333, 0]], [0.388217, [3, -0.333333, 0], [3, 0.506667, 0]],
                     [0.388217, [3, -0.506667, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[-1.11978, [3, -4.93333, 0], [3, 0.173333, 0]], [-0.926494, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.11978, [3, -0.16, 0], [3, 0.173333, 0]], [-0.926494, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.11978, [3, -0.16, 0], [3, 0.173333, 0]], [-0.926494, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([14.8, 15.32, 15.8, 16.32, 16.8, 17.32])
        keys.append([[-0.454107, [3, -4.93333, 0], [3, 0.173333, 0]], [-0.0245859, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.454107, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0245859, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.454107, [3, -0.16, 0], [3, 0.173333, 0]], [-0.0245859, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([15.24, 17.24])
        keys.append([[1.31153, [3, -5.08, 0], [3, 0.666667, 0]], [1.31153, [3, -0.666667, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def mov_3(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([8.76, 9.24, 9.76, 10.28, 10.76, 11.28, 11.76])
        keys.append(
            [[0.217786, [3, -2.92, 0], [3, 0.16, 0]], [-0.066004, [3, -0.16, 0.0949853], [3, 0.173333, -0.102901]],
             [-0.375872, [3, -0.173333, 0], [3, 0.173333, 0]], [0.00456004, [3, -0.173333, 0], [3, 0.16, 0]],
             [-0.365133, [3, -0.16, 0], [3, 0.173333, 0]],
             [0.00456004, [3, -0.173333, -0.0989123], [3, 0.16, 0.0913036]], [0.205514, [3, -0.16, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([8.76, 9.24, 9.76, 10.28, 10.76, 11.28, 11.76])
        keys.append([[-0.918907, [3, -2.92, 0], [3, 0.16, 0]], [-0.0629359, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-1.02936, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.016916, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.02015, [3, -0.16, 0], [3, 0.173333, 0]], [-0.016916, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.09225, [3, -0.16, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[-0.0158923, [3, -2.94667, 0], [3, 0.333333, 0]], [-0.493928, [3, -0.333333, 0], [3, 0.173333, 0]],
                     [-0.430072, [3, -0.173333, 0], [3, 0.16, 0]], [-0.493928, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.418879, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[-0.0973648, [3, -2.94667, 0], [3, 0.333333, 0]],
                     [0.0729092, [3, -0.333333, -0.0528154], [3, 0.173333, 0.027464]],
                     [0.143473, [3, -0.173333, 0], [3, 0.16, 0]], [0.0729092, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.143473, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[-0.800706, [3, -2.93333, 0], [3, 0.16, 0]], [-0.969447, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.6335, [3, -0.173333, -0.139594], [3, 0.173333, 0.139594]],
                     [-0.131882, [3, -0.173333, 0], [3, 0.16, 0]], [-0.6335, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.131882, [3, -0.173333, 0], [3, 0.16, 0]], [-1.05228, [3, -0.16, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[-2.05101, [3, -2.93333, 0], [3, 0.16, 0]], [-0.0245859, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.483252, [3, -0.173333, 0], [3, 0.173333, 0]], [-0.481718, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-0.483252, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.481718, [3, -0.173333, -0.00153411], [3, 0.16, 0.00141611]],
                     [-0.38661, [3, -0.16, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([8.72, 9.2, 9.72, 10.72, 11.72])
        keys.append([[0.613843, [3, -2.90667, 0], [3, 0.16, 0]], [0.613843, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.614934, [3, -0.173333, 0], [3, 0.333333, 0]], [0.613479, [3, -0.333333, 0], [3, 0.333333, 0]],
                     [0.613479, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[0.274614, [3, -2.94667, 0], [3, 0.333333, 0]],
                     [0.34978, [3, -0.333333, -0.0289308], [3, 0.173333, 0.015044]],
                     [0.406538, [3, -0.173333, 0], [3, 0.16, 0]], [0.34978, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.406538, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[0.134638, [3, -2.94667, 0], [3, 0.333333, 0]], [0.014986, [3, -0.333333, 0], [3, 0.173333, 0]],
                     [0.0870839, [3, -0.173333, 0], [3, 0.16, 0]], [0.014986, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.0870839, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[-0.289883, [3, -2.94667, 0], [3, 0.333333, 0]],
                     [-0.54146, [3, -0.333333, 0.14694], [3, 0.173333, -0.0764089]],
                     [-0.959931, [3, -0.173333, 0], [3, 0.16, 0]], [-0.54146, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.959931, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[0.0346476, [3, -2.94667, 0], [3, 0.333333, 0]], [0.692733, [3, -0.333333, 0], [3, 0.173333, 0]],
                     [0.67586, [3, -0.173333, 0], [3, 0.16, 0]], [0.692733, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.67586, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[1.54623, [3, -2.93333, 0], [3, 0.16, 0]], [0.651908, [3, -0.16, 0], [3, 0.173333, 0]],
                     [1.64287, [3, -0.173333, 0], [3, 0.173333, 0]], [1.64287, [3, -0.173333, 0], [3, 0.16, 0]],
                     [1.64287, [3, -0.16, 0], [3, 0.173333, 0]], [1.64287, [3, -0.173333, 0], [3, 0.16, 0]],
                     [1.15199, [3, -0.16, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[0.484702, [3, -2.93333, 0], [3, 0.16, 0]], [0.021434, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.911154, [3, -0.173333, -0.194562], [3, 0.173333, 0.194562]],
                     [1.18881, [3, -0.173333, 0], [3, 0.16, 0]], [0.911154, [3, -0.16, 0], [3, 0.173333, 0]],
                     [1.18881, [3, -0.173333, 0], [3, 0.16, 0]], [0.0551821, [3, -0.16, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([8.72, 9.2, 9.72, 10.72, 11.72])
        keys.append([[-0.813062, [3, -2.90667, 0], [3, 0.16, 0]], [-0.79312, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-1.42666, [3, -0.173333, 0], [3, 0.333333, 0]], [-1.15514, [3, -0.333333, 0], [3, 0.333333, 0]],
                     [-1.82551, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append(
            [[0.00098731, [3, -2.94667, 0], [3, 0.333333, 0]], [-0.0802851, [3, -0.333333, 0], [3, 0.173333, 0]],
             [0.258309, [3, -0.173333, 0], [3, 0.16, 0]], [-0.0802851, [3, -0.16, 0], [3, 0.173333, 0]],
             [0.246091, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[0.179769, [3, -2.94667, 0], [3, 0.333333, 0]],
                     [0.261799, [3, -0.333333, -0.0271751], [3, 0.173333, 0.014131]],
                     [0.303687, [3, -0.173333, 0], [3, 0.16, 0]], [0.303687, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.371755, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[0.673468, [3, -2.93333, 0], [3, 0.16, 0]], [0.833004, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.398883, [3, -0.173333, 0], [3, 0.173333, 0]], [0.658129, [3, -0.173333, 0], [3, 0.16, 0]],
                     [0.398883, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.658129, [3, -0.173333, -0.134276], [3, 0.16, 0.123947]], [1.17355, [3, -0.16, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[2.08926, [3, -2.93333, 0], [3, 0.16, 0]], [-0.273093, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.516916, [3, -0.173333, -0.263081], [3, 0.173333, 0.263081]],
                     [1.30539, [3, -0.173333, 0], [3, 0.16, 0]], [0.516916, [3, -0.16, 0], [3, 0.173333, 0]],
                     [1.30539, [3, -0.173333, 0], [3, 0.16, 0]], [0.555266, [3, -0.16, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([8.72, 9.2, 9.72, 10.72, 11.72])
        keys.append([[0.585115, [3, -2.90667, 0], [3, 0.16, 0]], [0.585115, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.587661, [3, -0.173333, -0.000189252], [3, 0.333333, 0.000363946]],
                     [0.588025, [3, -0.333333, 0], [3, 0.333333, 0]], [0.587661, [3, -0.333333, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[0.277401, [3, -2.94667, 0], [3, 0.333333, 0]], [0.0288929, [3, -0.333333, 0], [3, 0.173333, 0]],
                     [0.355635, [3, -0.173333, 0], [3, 0.16, 0]], [0.0288929, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.355635, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[-0.159001, [3, -2.94667, 0], [3, 0.333333, 0]],
                     [-0.439722, [3, -0.333333, 0.107313], [3, 0.173333, -0.0558026]],
                     [-0.648346, [3, -0.173333, 0], [3, 0.16, 0]], [-0.439722, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-0.648346, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([8.84, 9.84, 10.36, 10.84, 11.36])
        keys.append([[0.0277265, [3, -2.94667, 0], [3, 0.333333, 0]], [0.606045, [3, -0.333333, 0], [3, 0.173333, 0]],
                     [0.142776, [3, -0.173333, 0], [3, 0.16, 0]], [0.606045, [3, -0.16, 0], [3, 0.173333, 0]],
                     [0.142776, [3, -0.173333, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[1.5095, [3, -2.93333, 0], [3, 0.16, 0]], [0.96186, [3, -0.16, 0], [3, 0.173333, 0]],
                     [1.17815, [3, -0.173333, -0.055224], [3, 0.173333, 0.055224]],
                     [1.2932, [3, -0.173333, 0], [3, 0.16, 0]], [1.17815, [3, -0.16, 0], [3, 0.173333, 0]],
                     [1.2932, [3, -0.173333, 0], [3, 0.16, 0]], [0.719487, [3, -0.16, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([8.8, 9.28, 9.8, 10.32, 10.8, 11.32, 11.8])
        keys.append([[-0.382007, [3, -2.93333, 0], [3, 0.16, 0]], [-0.01078, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-1.63068, [3, -0.173333, 0], [3, 0.173333, 0]], [-1.57546, [3, -0.173333, 0], [3, 0.16, 0]],
                     [-1.63068, [3, -0.16, 0], [3, 0.173333, 0]],
                     [-1.57546, [3, -0.173333, -0.055224], [3, 0.16, 0.050976]],
                     [-0.00310997, [3, -0.16, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([8.72, 9.2, 9.72, 10.72, 11.72])
        keys.append([[0.849794, [3, -2.90667, 0], [3, 0.16, 0]], [0.826783, [3, -0.16, 0], [3, 0.173333, 0]],
                     [1.0937, [3, -0.173333, 0], [3, 0.333333, 0]], [0.27301, [3, -0.333333, 0], [3, 0.333333, 0]],
                     [1.43271, [3, -0.333333, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def arms_dance(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.96, 1.96, 2.36, 2.96, 3.56, 4.16, 4.76, 5.36, 6.28, 7.16, 7.56, 8.16, 8.76, 9.36, 9.96, 10.56, 11.48, 12.56])
        keys.append([[-0.18719, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.185656, [3, -0.333333, -0.00153415], [3, 0.133333, 0.000613659]], [0.0291041, [3, -0.133333, 0], [3, 0.2, 0]], [-0.185656, [3, -0.2, 0], [3, 0.2, 0]], [0.00149202, [3, -0.2, 0], [3, 0.2, 0]], [-0.185656, [3, -0.2, 0], [3, 0.2, 0]], [0.0812599, [3, -0.2, 0], [3, 0.2, 0]], [-0.185656, [3, -0.2, 0.0573232], [3, 0.306667, -0.0878955]], [-0.354396, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.185656, [3, -0.293333, -0.0878855], [3, 0.133333, 0.0399479]], [0.0291041, [3, -0.133333, 0], [3, 0.2, 0]], [-0.185656, [3, -0.2, 0], [3, 0.2, 0]], [0.00149202, [3, -0.2, 0], [3, 0.2, 0]], [-0.185656, [3, -0.2, 0], [3, 0.2, 0]], [0.0812599, [3, -0.2, 0], [3, 0.2, 0]], [-0.185656, [3, -0.2, 0.0573232], [3, 0.306667, -0.0878955]], [-0.354396, [3, -0.306667, 0], [3, 0.36, 0]], [-0.233211, [3, -0.36, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([0.96, 1.96, 2.36, 2.96, 3.56, 4.16, 4.76, 5.36, 6.28, 7.16, 7.56, 8.16, 8.76, 9.36, 9.96, 10.56, 11.48, 12.56])
        keys.append([[-0.00157595, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.00157595, [3, -0.333333, 0], [3, 0.133333, 0]], [-0.00157595, [3, -0.133333, 0], [3, 0.2, 0]], [0.00609397, [3, -0.2, 0], [3, 0.2, 0]], [-4.19617e-05, [3, -0.2, 0], [3, 0.2, 0]], [0.00609397, [3, -0.2, 0], [3, 0.2, 0]], [-4.19617e-05, [3, -0.2, 0], [3, 0.2, 0]], [0.00609397, [3, -0.2, -0.00613594], [3, 0.306667, 0.00940844]], [0.431013, [3, -0.306667, 0], [3, 0.293333, 0]], [0.00157595, [3, -0.293333, 0], [3, 0.133333, 0]], [0.00157595, [3, -0.133333, 0], [3, 0.2, 0]], [-0.00609397, [3, -0.2, 0], [3, 0.2, 0]], [4.19617e-05, [3, -0.2, 0], [3, 0.2, 0]], [-0.00609397, [3, -0.2, 0], [3, 0.2, 0]], [4.19617e-05, [3, -0.2, 0], [3, 0.2, 0]], [-0.00609397, [3, -0.2, 0.00613594], [3, 0.306667, -0.00940844]], [-0.431013, [3, -0.306667, 0], [3, 0.36, 0]], [-0.00924586, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[0.105804, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.417291, [3, -0.333333, 0.102487], [3, 0.44, -0.135283]], [-0.607505, [3, -0.44, 0], [3, 0.693333, 0]], [-0.421891, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.671934, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.31136, [3, -0.293333, 0], [3, 0.44, 0]], [-0.355846, [3, -0.44, 0], [3, 0.693333, 0]], [-0.31136, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.443284, [3, -0.306667, 0], [3, 0.36, 0]], [0.108872, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[-0.0735901, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0858622, [3, -0.333333, 0.00749368], [3, 0.44, -0.00989166]], [-0.125746, [3, -0.44, 0], [3, 0.693333, 0]], [-0.0858622, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.105804, [3, -0.306667, 0.00654797], [3, 0.293333, -0.00626327]], [-0.124296, [3, -0.293333, 0.00512454], [3, 0.44, -0.00768681]], [-0.144238, [3, -0.44, 0], [3, 0.693333, 0]], [-0.124296, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.314512, [3, -0.306667, 0], [3, 0.36, 0]], [-0.113474, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[-0.435615, [3, -0.333333, 0], [3, 0.333333, 0]], [-1.24863, [3, -0.333333, 0], [3, 0.0666667, 0]], [-1.07529, [3, -0.0666667, -0.0429523], [3, 0.0666667, 0.0429523]], [-0.990921, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.4005, [3, -0.0666667, 0.0922825], [3, 0.0666667, -0.0922825]], [-1.54462, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.39897, [3, -0.0666667, -0.0493303], [3, 0.0666667, 0.0493303]], [-1.24863, [3, -0.0666667, -0.0539458], [3, 0.0666667, 0.0539458]], [-1.07529, [3, -0.0666667, -0.0429523], [3, 0.0666667, 0.0429523]], [-0.990921, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.4005, [3, -0.0666667, 0.0922825], [3, 0.0666667, -0.0922825]], [-1.54462, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.39897, [3, -0.0666667, -0.0493303], [3, 0.0666667, 0.0493303]], [-1.24863, [3, -0.0666667, -0.0539458], [3, 0.0666667, 0.0539458]], [-1.07529, [3, -0.0666667, -0.0429523], [3, 0.0666667, 0.0429523]], [-0.990921, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.4005, [3, -0.0666667, 0.0922825], [3, 0.0666667, -0.0922825]], [-1.54462, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.39897, [3, -0.0666667, 0], [3, 0.306667, 0]], [-1.53856, [3, -0.306667, 0], [3, 0.293333, 0]], [-1.33309, [3, -0.293333, 0], [3, 0.0666667, 0]], [-1.34689, [3, -0.0666667, 0.0138056], [3, 0.0666667, -0.0138056]], [-1.43126, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.31468, [3, -0.0666667, -0.0999658], [3, 0.0666667, 0.0999658]], [-0.83147, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.16281, [3, -0.0666667, 0.083603], [3, 0.0666667, -0.083603]], [-1.33309, [3, -0.0666667, 0.0138056], [3, 0.0666667, -0.0138056]], [-1.34689, [3, -0.0666667, 0.0138056], [3, 0.0666667, -0.0138056]], [-1.43126, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.31468, [3, -0.0666667, -0.0999658], [3, 0.0666667, 0.0999658]], [-0.83147, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.16281, [3, -0.0666667, 0.083603], [3, 0.0666667, -0.083603]], [-1.33309, [3, -0.0666667, 0.0138056], [3, 0.0666667, -0.0138056]], [-1.34689, [3, -0.0666667, 0.0138056], [3, 0.0666667, -0.0138056]], [-1.43126, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.31468, [3, -0.0666667, -0.0999658], [3, 0.0666667, 0.0999658]], [-0.83147, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-1.16281, [3, -0.0666667, 0], [3, 0.306667, 0]], [-0.932714, [3, -0.306667, -0.109857], [3, 0.36, 0.128963]], [-0.446352, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[-1.21344, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.434165, [3, -0.333333, -0.248849], [3, 0.0666667, 0.0497698]], [-0.31758, [3, -0.0666667, -0.0449974], [3, 0.0666667, 0.0449974]], [-0.16418, [3, -0.0666667, -0.0631497], [3, 0.0666667, 0.0631497]], [0.061318, [3, -0.0666667, -0.0590701], [3, 0.0666667, 0.0590701]], [0.190241, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0.104068], [3, 0.0666667, -0.104068]], [-0.434165, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.31758, [3, -0.0666667, -0.0447418], [3, 0.0666667, 0.0447418]], [-0.165714, [3, -0.0666667, -0.0631497], [3, 0.0666667, 0.0631497]], [0.061318, [3, -0.0666667, -0.0593258], [3, 0.0666667, 0.0593258]], [0.190241, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0.104068], [3, 0.0666667, -0.104068]], [-0.434165, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.31758, [3, -0.0666667, -0.0449974], [3, 0.0666667, 0.0449974]], [-0.16418, [3, -0.0666667, -0.0631497], [3, 0.0666667, 0.0631497]], [0.061318, [3, -0.0666667, -0.0590701], [3, 0.0666667, 0.0590701]], [0.190241, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.176453, [3, -0.0666667, 0.104827], [3, 0.306667, -0.482206]], [-1.57086, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.185572, [3, -0.293333, -0.182239], [3, 0.0666667, 0.041418]], [-0.144154, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.174835, [3, -0.0666667, 0.0306808], [3, 0.0666667, -0.0306808]], [-0.351244, [3, -0.0666667, 0.0452529], [3, 0.0666667, -0.0452529]], [-0.446352, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.036858, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.185572, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.144154, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.176367, [3, -0.0666667, 0.0322132], [3, 0.0666667, -0.0322132]], [-0.351244, [3, -0.0666667, 0.0449975], [3, 0.0666667, -0.0449975]], [-0.446352, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.036858, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.185572, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.144154, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.174835, [3, -0.0666667, 0.0306808], [3, 0.0666667, -0.0306808]], [-0.351244, [3, -0.0666667, 0.0452529], [3, 0.0666667, -0.0452529]], [-0.446352, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.036858, [3, -0.0666667, -0.0497637], [3, 0.306667, 0.228913]], [0.389678, [3, -0.306667, 0], [3, 0.36, 0]], [-1.19503, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[0.3136, [3, -0.333333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.0666667, 0]], [0.1872, [3, -0.0666667, -0.000799999], [3, 0.0666667, 0.000799999]], [0.188, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.184, [3, -0.0666667, 0.00399999], [3, 0.0666667, -0.00399999]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1908, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1872, [3, -0.0666667, -0.000799999], [3, 0.0666667, 0.000799999]], [0.188, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.184, [3, -0.0666667, 0.00399999], [3, 0.0666667, -0.00399999]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1908, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1872, [3, -0.0666667, -0.000799999], [3, 0.0666667, 0.000799999]], [0.188, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.184, [3, -0.0666667, 0.00399999], [3, 0.0666667, -0.00399999]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1908, [3, -0.0666667, -0.0595238], [3, 0.306667, 0.27381]], [1, [3, -0.306667, 0], [3, 0.293333, 0]], [0, [3, -0.293333, 0], [3, 0.0666667, 0]], [0.1568, [3, -0.0666667, -0.0212], [3, 0.0666667, 0.0212]], [0.178, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1616, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1672, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1668, [3, -0.0666667, 0.000399992], [3, 0.0666667, -0.000399992]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1568, [3, -0.0666667, -0.0212], [3, 0.0666667, 0.0212]], [0.178, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1616, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1672, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1668, [3, -0.0666667, 0.000399992], [3, 0.0666667, -0.000399992]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1568, [3, -0.0666667, -0.0212], [3, 0.0666667, 0.0212]], [0.178, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1616, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1672, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1668, [3, -0.0666667, 0], [3, 0.306667, 0]], [1, [3, -0.306667, 0], [3, 0.36, 0]], [0.2976, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[0.131966, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.052114, [3, -0.333333, 0.0670023], [3, 0.44, -0.0884431]], [-0.33437, [3, -0.44, 0], [3, 0.693333, 0]], [-0.052114, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.406468, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.0767419, [3, -0.293333, 0], [3, 0.44, 0]], [-0.44797, [3, -0.44, 0], [3, 0.693333, 0]], [-0.0798099, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.104354, [3, -0.306667, 0], [3, 0.36, 0]], [0.144238, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[0.06447, [3, -0.333333, 0], [3, 0.333333, 0]], [0.1335, [3, -0.333333, -0.0158691], [3, 0.44, 0.0209472]], [0.174919, [3, -0.44, 0], [3, 0.693333, 0]], [0.131966, [3, -0.693333, 0], [3, 0.306667, 0]], [0.276162, [3, -0.306667, 0], [3, 0.293333, 0]], [0.128814, [3, -0.293333, 0.0132948], [3, 0.44, -0.0199421]], [0.108872, [3, -0.44, 0], [3, 0.693333, 0]], [0.128814, [3, -0.693333, -0.0199421], [3, 0.306667, 0.00882056]], [0.208583, [3, -0.306667, 0], [3, 0.36, 0]], [0.115092, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[-0.170232, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.36505, [3, -0.333333, 0.0104588], [3, 0.44, -0.0138056]], [-0.378855, [3, -0.44, 0], [3, 0.693333, 0]], [-0.36505, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.371186, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.36505, [3, -0.293333, 0], [3, 0.44, 0]], [-0.378855, [3, -0.44, 0], [3, 0.693333, 0]], [-0.36505, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.371186, [3, -0.306667, 0], [3, 0.36, 0]], [-0.171766, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[-0.0874801, [3, -0.333333, 0], [3, 0.333333, 0]], [0.731677, [3, -0.333333, -0.17544], [3, 0.44, 0.231581]], [1.13358, [3, -0.44, 0], [3, 0.693333, 0]], [0.730143, [3, -0.693333, 0], [3, 0.306667, 0]], [1.30079, [3, -0.306667, 0], [3, 0.293333, 0]], [0.653526, [3, -0.293333, 0], [3, 0.44, 0]], [1.00481, [3, -0.44, 0], [3, 0.693333, 0]], [0.650458, [3, -0.693333, 0], [3, 0.306667, 0]], [0.856014, [3, -0.306667, 0], [3, 0.36, 0]], [-0.092082, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[1.4818, [3, -0.333333, 0], [3, 0.333333, 0]], [0.357381, [3, -0.333333, 0], [3, 0.0666667, 0]], [0.510779, [3, -0.0666667, -0.0378384], [3, 0.0666667, 0.0378384]], [0.584411, [3, -0.0666667, -0.0158514], [3, 0.0666667, 0.0158514]], [0.605888, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.101229, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.282215, [3, -0.0666667, -0.0426919], [3, 0.0666667, 0.0426919]], [0.357381, [3, -0.0666667, -0.0380941], [3, 0.0666667, 0.0380941]], [0.510779, [3, -0.0666667, -0.0378384], [3, 0.0666667, 0.0378384]], [0.584411, [3, -0.0666667, -0.0158514], [3, 0.0666667, 0.0158514]], [0.605888, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.101229, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.282215, [3, -0.0666667, -0.0426919], [3, 0.0666667, 0.0426919]], [0.357381, [3, -0.0666667, -0.0380941], [3, 0.0666667, 0.0380941]], [0.510779, [3, -0.0666667, -0.0378384], [3, 0.0666667, 0.0378384]], [0.584411, [3, -0.0666667, -0.0158514], [3, 0.0666667, 0.0158514]], [0.605888, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.101229, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.282215, [3, -0.0666667, 0], [3, 0.306667, 0]], [0.095066, [3, -0.306667, 0], [3, 0.293333, 0]], [0.624379, [3, -0.293333, -0.176262], [3, 0.0666667, 0.0400596]], [0.744032, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.510865, [3, -0.0666667, 0.0723538], [3, 0.0666667, -0.0723538]], [0.309909, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.61671, [3, -0.0666667, -0.0692858], [3, 0.0666667, 0.0692858]], [0.725624, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.624379, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.744032, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.510865, [3, -0.0666667, 0.0723538], [3, 0.0666667, -0.0723538]], [0.309909, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.61671, [3, -0.0666667, -0.0692858], [3, 0.0666667, 0.0692858]], [0.725624, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.624379, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.744032, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.510865, [3, -0.0666667, 0.0723538], [3, 0.0666667, -0.0723538]], [0.309909, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.61671, [3, -0.0666667, -0.0692858], [3, 0.0666667, 0.0692858]], [0.725624, [3, -0.0666667, 0], [3, 0.306667, 0]], [0.72409, [3, -0.306667, 0], [3, 0.36, 0]], [1.4726, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[0.0797259, [3, -0.333333, 0], [3, 0.333333, 0]], [0.159494, [3, -0.333333, 0], [3, 0.0666667, 0]], [0.141086, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.151824, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.0889301, [3, -0.0666667, 0.0404302], [3, 0.0666667, -0.0404302]], [-0.0907571, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.066004, [3, -0.0666667, -0.0247531], [3, 0.0666667, 0.0247531]], [0.159494, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.141086, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.151824, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.0889301, [3, -0.0666667, 0.0404302], [3, 0.0666667, -0.0404302]], [-0.0907571, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.066004, [3, -0.0666667, -0.0247531], [3, 0.0666667, 0.0247531]], [0.159494, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.141086, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.151824, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.0889301, [3, -0.0666667, 0.0404302], [3, 0.0666667, -0.0404302]], [-0.0907571, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.066004, [3, -0.0666667, -0.0247531], [3, 0.306667, 0.113864]], [0.466294, [3, -0.306667, 0], [3, 0.293333, 0]], [0.0337899, [3, -0.293333, 0.171217], [3, 0.0666667, -0.038913]], [-0.164096, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.124212, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.182504, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0843279, [3, -0.0666667, -0.0217316], [3, 0.0666667, 0.0217316]], [-0.052114, [3, -0.0666667, -0.0196863], [3, 0.0666667, 0.0196863]], [0.0337899, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.164096, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.124212, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.182504, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0843279, [3, -0.0666667, -0.0217316], [3, 0.0666667, 0.0217316]], [-0.052114, [3, -0.0666667, -0.0196863], [3, 0.0666667, 0.0196863]], [0.0337899, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.164096, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.124212, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.182504, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0843279, [3, -0.0666667, -0.0217316], [3, 0.0666667, 0.0217316]], [-0.052114, [3, -0.0666667, -0.0165271], [3, 0.306667, 0.0760244]], [0.193327, [3, -0.306667, 0], [3, 0.36, 0]], [0.12728, [3, -0.36, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[-0.213269, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.573758, [3, -0.333333, 0.111641], [3, 0.0666667, -0.0223282]], [-0.615176, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.412688, [3, -0.0666667, -0.0700526], [3, 0.0666667, 0.0700526]], [-0.194861, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.961676, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.763974, [3, -0.0666667, -0.0646531], [3, 0.0666667, 0.0646531]], [-0.573758, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.615176, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.412688, [3, -0.0666667, -0.0700526], [3, 0.0666667, 0.0700526]], [-0.194861, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.961676, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.763974, [3, -0.0666667, -0.0646531], [3, 0.0666667, 0.0646531]], [-0.573758, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.615176, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.411154, [3, -0.0666667, -0.0700526], [3, 0.0666667, 0.0700526]], [-0.194861, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.961676, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.763974, [3, -0.0666667, 0], [3, 0.306667, 0]], [-1.79483, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.421808, [3, -0.293333, -0.0539942], [3, 0.0666667, 0.0122714]], [-0.409536, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.46476, [3, -0.0666667, 0.0127834], [3, 0.0666667, -0.0127834]], [-0.486237, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.472429, [3, -0.0666667, -0.0138073], [3, 0.0666667, 0.0138073]], [-0.131882, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.421808, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.409536, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.46476, [3, -0.0666667, 0.0127834], [3, 0.0666667, -0.0127834]], [-0.486237, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.472429, [3, -0.0666667, -0.0138073], [3, 0.0666667, 0.0138073]], [-0.131882, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.421808, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.409536, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.46476, [3, -0.0666667, 0.0127834], [3, 0.0666667, -0.0127834]], [-0.486237, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.472429, [3, -0.0666667, -0.0138073], [3, 0.0666667, 0.0138073]], [-0.131882, [3, -0.0666667, 0], [3, 0.306667, 0]], [-0.581345, [3, -0.306667, 0], [3, 0.36, 0]], [0.0843279, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[0.0951499, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.31136, [3, -0.333333, 0.0337021], [3, 0.44, -0.0444867]], [-0.355846, [3, -0.44, 0], [3, 0.693333, 0]], [-0.31136, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.443284, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.417291, [3, -0.293333, 0], [3, 0.44, 0]], [-0.607505, [3, -0.44, 0], [3, 0.693333, 0]], [-0.421891, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.671934, [3, -0.306667, 0], [3, 0.36, 0]], [0.105888, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[0.122762, [3, -0.333333, 0], [3, 0.333333, 0]], [0.124296, [3, -0.333333, -0.00153397], [3, 0.44, 0.00202484]], [0.144238, [3, -0.44, 0], [3, 0.693333, 0]], [0.124296, [3, -0.693333, 0], [3, 0.306667, 0]], [0.314512, [3, -0.306667, 0], [3, 0.293333, 0]], [0.0858622, [3, -0.293333, 0], [3, 0.44, 0]], [0.125746, [3, -0.44, 0], [3, 0.693333, 0]], [0.0858622, [3, -0.693333, 0], [3, 0.306667, 0]], [0.105804, [3, -0.306667, 0], [3, 0.36, 0]], [0.073674, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[0.385075, [3, -0.333333, 0], [3, 0.333333, 0]], [1.33309, [3, -0.333333, -0.0690278], [3, 0.0666667, 0.0138056]], [1.34689, [3, -0.0666667, -0.0138056], [3, 0.0666667, 0.0138056]], [1.43126, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.31468, [3, -0.0666667, 0.0999658], [3, 0.0666667, -0.0999658]], [0.83147, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.16281, [3, -0.0666667, -0.083603], [3, 0.0666667, 0.083603]], [1.33309, [3, -0.0666667, -0.0138056], [3, 0.0666667, 0.0138056]], [1.34689, [3, -0.0666667, -0.0138056], [3, 0.0666667, 0.0138056]], [1.43126, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.31468, [3, -0.0666667, 0.0999658], [3, 0.0666667, -0.0999658]], [0.83147, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.16281, [3, -0.0666667, -0.083603], [3, 0.0666667, 0.083603]], [1.33309, [3, -0.0666667, -0.0138056], [3, 0.0666667, 0.0138056]], [1.34689, [3, -0.0666667, -0.0138056], [3, 0.0666667, 0.0138056]], [1.43126, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.31468, [3, -0.0666667, 0.0999658], [3, 0.0666667, -0.0999658]], [0.83147, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.16281, [3, -0.0666667, 0], [3, 0.306667, 0]], [0.932714, [3, -0.306667, 0], [3, 0.293333, 0]], [1.24863, [3, -0.293333, 0], [3, 0.0666667, 0]], [1.07529, [3, -0.0666667, 0.0429523], [3, 0.0666667, -0.0429523]], [0.990921, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.4005, [3, -0.0666667, -0.0922825], [3, 0.0666667, 0.0922825]], [1.54462, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.39897, [3, -0.0666667, 0.0493303], [3, 0.0666667, -0.0493303]], [1.24863, [3, -0.0666667, 0.0539458], [3, 0.0666667, -0.0539458]], [1.07529, [3, -0.0666667, 0.0429523], [3, 0.0666667, -0.0429523]], [0.990921, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.4005, [3, -0.0666667, -0.0922825], [3, 0.0666667, 0.0922825]], [1.54462, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.39897, [3, -0.0666667, 0.0493303], [3, 0.0666667, -0.0493303]], [1.24863, [3, -0.0666667, 0.0539458], [3, 0.0666667, -0.0539458]], [1.07529, [3, -0.0666667, 0.0429523], [3, 0.0666667, -0.0429523]], [0.990921, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.4005, [3, -0.0666667, -0.0922825], [3, 0.0666667, 0.0922825]], [1.54462, [3, -0.0666667, 0], [3, 0.0666667, 0]], [1.39897, [3, -0.0666667, 0], [3, 0.306667, 0]], [1.53856, [3, -0.306667, 0], [3, 0.36, 0]], [0.428028, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[1.23176, [3, -0.333333, 0], [3, 0.333333, 0]], [0.185572, [3, -0.333333, 0.20709], [3, 0.0666667, -0.041418]], [0.144154, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.174835, [3, -0.0666667, -0.0306808], [3, 0.0666667, 0.0306808]], [0.351244, [3, -0.0666667, -0.0452529], [3, 0.0666667, 0.0452529]], [0.446352, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.036858, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.185572, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.144154, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.176367, [3, -0.0666667, -0.0322132], [3, 0.0666667, 0.0322132]], [0.351244, [3, -0.0666667, -0.0449975], [3, 0.0666667, 0.0449975]], [0.446352, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.036858, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.185572, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.144154, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.174835, [3, -0.0666667, -0.0306808], [3, 0.0666667, 0.0306808]], [0.351244, [3, -0.0666667, -0.0452529], [3, 0.0666667, 0.0452529]], [0.446352, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.036858, [3, -0.0666667, 0.0497637], [3, 0.306667, -0.228913]], [-0.389678, [3, -0.306667, 0], [3, 0.293333, 0]], [0.434165, [3, -0.293333, 0], [3, 0.0666667, 0]], [0.31758, [3, -0.0666667, 0.0449974], [3, 0.0666667, -0.0449974]], [0.16418, [3, -0.0666667, 0.0631497], [3, 0.0666667, -0.0631497]], [-0.061318, [3, -0.0666667, 0.0590701], [3, 0.0666667, -0.0590701]], [-0.190241, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.176453, [3, -0.0666667, -0.104068], [3, 0.0666667, 0.104068]], [0.434165, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.31758, [3, -0.0666667, 0.0447418], [3, 0.0666667, -0.0447418]], [0.165714, [3, -0.0666667, 0.0631497], [3, 0.0666667, -0.0631497]], [-0.061318, [3, -0.0666667, 0.0593258], [3, 0.0666667, -0.0593258]], [-0.190241, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.176453, [3, -0.0666667, -0.104068], [3, 0.0666667, 0.104068]], [0.434165, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.31758, [3, -0.0666667, 0.0449974], [3, 0.0666667, -0.0449974]], [0.16418, [3, -0.0666667, 0.0631497], [3, 0.0666667, -0.0631497]], [-0.061318, [3, -0.0666667, 0.0590701], [3, 0.0666667, -0.0590701]], [-0.190241, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.176453, [3, -0.0666667, -0.104827], [3, 0.306667, 0.482206]], [1.57086, [3, -0.306667, 0], [3, 0.36, 0]], [1.17347, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[0.3112, [3, -0.333333, 0], [3, 0.333333, 0]], [0, [3, -0.333333, 0], [3, 0.0666667, 0]], [0.1568, [3, -0.0666667, -0.0212], [3, 0.0666667, 0.0212]], [0.178, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1616, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1672, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1668, [3, -0.0666667, 0.000399992], [3, 0.0666667, -0.000399992]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1568, [3, -0.0666667, -0.0212], [3, 0.0666667, 0.0212]], [0.178, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1616, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1672, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1668, [3, -0.0666667, 0.000399992], [3, 0.0666667, -0.000399992]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1568, [3, -0.0666667, -0.0212], [3, 0.0666667, 0.0212]], [0.178, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1616, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1672, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1668, [3, -0.0666667, 0], [3, 0.306667, 0]], [1, [3, -0.306667, 0], [3, 0.293333, 0]], [0, [3, -0.293333, 0], [3, 0.0666667, 0]], [0.1872, [3, -0.0666667, -0.000799999], [3, 0.0666667, 0.000799999]], [0.188, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.184, [3, -0.0666667, 0.00399999], [3, 0.0666667, -0.00399999]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1908, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1872, [3, -0.0666667, -0.000799999], [3, 0.0666667, 0.000799999]], [0.188, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.184, [3, -0.0666667, 0.00399999], [3, 0.0666667, -0.00399999]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1908, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1872, [3, -0.0666667, -0.000799999], [3, 0.0666667, 0.000799999]], [0.188, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.184, [3, -0.0666667, 0.00399999], [3, 0.0666667, -0.00399999]], [0, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.1908, [3, -0.0666667, -0.0595238], [3, 0.306667, 0.27381]], [1, [3, -0.306667, 0], [3, 0.36, 0]], [0.3044, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[0.139552, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0767419, [3, -0.333333, 0.0844141], [3, 0.44, -0.111427]], [-0.44797, [3, -0.44, 0], [3, 0.693333, 0]], [-0.0798099, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.104354, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.052114, [3, -0.293333, 0], [3, 0.44, 0]], [-0.33437, [3, -0.44, 0], [3, 0.693333, 0]], [-0.052114, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.406468, [3, -0.306667, 0], [3, 0.36, 0]], [0.136484, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[-0.116542, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.128814, [3, -0.333333, 0], [3, 0.44, 0]], [-0.108872, [3, -0.44, 0], [3, 0.693333, 0]], [-0.128814, [3, -0.693333, 0.0199421], [3, 0.306667, -0.00882056]], [-0.208583, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.1335, [3, -0.293333, 0], [3, 0.44, 0]], [-0.174919, [3, -0.44, 0], [3, 0.693333, 0]], [-0.131966, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.276162, [3, -0.306667, 0], [3, 0.36, 0]], [-0.0628521, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RHipYawPitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[-0.170232, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.36505, [3, -0.333333, 0.0104588], [3, 0.44, -0.0138056]], [-0.378855, [3, -0.44, 0], [3, 0.693333, 0]], [-0.36505, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.371186, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.36505, [3, -0.293333, 0], [3, 0.44, 0]], [-0.378855, [3, -0.44, 0], [3, 0.693333, 0]], [-0.36505, [3, -0.693333, 0], [3, 0.306667, 0]], [-0.371186, [3, -0.306667, 0], [3, 0.36, 0]], [-0.171766, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.96, 1.96, 3.28, 5.36, 6.28, 7.16, 8.48, 10.56, 11.48, 12.56])
        keys.append([[-0.0858622, [3, -0.333333, 0], [3, 0.333333, 0]], [0.653526, [3, -0.333333, -0.156706], [3, 0.44, 0.206852]], [1.00481, [3, -0.44, 0], [3, 0.693333, 0]], [0.650458, [3, -0.693333, 0], [3, 0.306667, 0]], [0.856014, [3, -0.306667, 0], [3, 0.293333, 0]], [0.731677, [3, -0.293333, 0], [3, 0.44, 0]], [1.13358, [3, -0.44, 0], [3, 0.693333, 0]], [0.730143, [3, -0.693333, 0], [3, 0.306667, 0]], [1.30079, [3, -0.306667, 0], [3, 0.36, 0]], [-0.091998, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[1.46808, [3, -0.333333, 0], [3, 0.333333, 0]], [0.624379, [3, -0.333333, 0], [3, 0.0666667, 0]], [0.744032, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.510865, [3, -0.0666667, 0.0723538], [3, 0.0666667, -0.0723538]], [0.309909, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.61671, [3, -0.0666667, -0.0692858], [3, 0.0666667, 0.0692858]], [0.725624, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.624379, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.744032, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.510865, [3, -0.0666667, 0.0723538], [3, 0.0666667, -0.0723538]], [0.309909, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.61671, [3, -0.0666667, -0.0692858], [3, 0.0666667, 0.0692858]], [0.725624, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.624379, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.744032, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.510865, [3, -0.0666667, 0.0723538], [3, 0.0666667, -0.0723538]], [0.309909, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.61671, [3, -0.0666667, -0.0692858], [3, 0.0666667, 0.0692858]], [0.725624, [3, -0.0666667, 0], [3, 0.306667, 0]], [0.72409, [3, -0.306667, 0.00153411], [3, 0.293333, -0.00146741]], [0.357381, [3, -0.293333, 0], [3, 0.0666667, 0]], [0.510779, [3, -0.0666667, -0.0378384], [3, 0.0666667, 0.0378384]], [0.584411, [3, -0.0666667, -0.0158514], [3, 0.0666667, 0.0158514]], [0.605888, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.101229, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.282215, [3, -0.0666667, -0.0426919], [3, 0.0666667, 0.0426919]], [0.357381, [3, -0.0666667, -0.0380941], [3, 0.0666667, 0.0380941]], [0.510779, [3, -0.0666667, -0.0378384], [3, 0.0666667, 0.0378384]], [0.584411, [3, -0.0666667, -0.0158514], [3, 0.0666667, 0.0158514]], [0.605888, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.101229, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.282215, [3, -0.0666667, -0.0426919], [3, 0.0666667, 0.0426919]], [0.357381, [3, -0.0666667, -0.0380941], [3, 0.0666667, 0.0380941]], [0.510779, [3, -0.0666667, -0.0378384], [3, 0.0666667, 0.0378384]], [0.584411, [3, -0.0666667, -0.0158514], [3, 0.0666667, 0.0158514]], [0.605888, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.101229, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.282215, [3, -0.0666667, 0], [3, 0.306667, 0]], [0.095066, [3, -0.306667, 0], [3, 0.36, 0]], [1.46501, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[-0.067538, [3, -0.333333, 0], [3, 0.333333, 0]], [-0.0337899, [3, -0.333333, -0.033748], [3, 0.0666667, 0.00674961]], [0.164096, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.124212, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.182504, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.0843279, [3, -0.0666667, 0.0217316], [3, 0.0666667, -0.0217316]], [0.052114, [3, -0.0666667, 0.0196863], [3, 0.0666667, -0.0196863]], [-0.0337899, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.164096, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.124212, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.182504, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.0843279, [3, -0.0666667, 0.0217316], [3, 0.0666667, -0.0217316]], [0.052114, [3, -0.0666667, 0.0196863], [3, 0.0666667, -0.0196863]], [-0.0337899, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.164096, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.124212, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.182504, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.0843279, [3, -0.0666667, 0.0217316], [3, 0.0666667, -0.0217316]], [0.052114, [3, -0.0666667, 0.0165271], [3, 0.306667, -0.0760244]], [-0.193327, [3, -0.306667, 0], [3, 0.293333, 0]], [-0.159494, [3, -0.293333, -0.0141888], [3, 0.0666667, 0.00322472]], [-0.141086, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.151824, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0889301, [3, -0.0666667, -0.0404302], [3, 0.0666667, 0.0404302]], [0.0907571, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.066004, [3, -0.0666667, 0.0247531], [3, 0.0666667, -0.0247531]], [-0.159494, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.141086, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.151824, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0889301, [3, -0.0666667, -0.0404302], [3, 0.0666667, 0.0404302]], [0.0907571, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.066004, [3, -0.0666667, 0.0247531], [3, 0.0666667, -0.0247531]], [-0.159494, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.141086, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.151824, [3, -0.0666667, 0], [3, 0.0666667, 0]], [-0.0889301, [3, -0.0666667, -0.0404302], [3, 0.0666667, 0.0404302]], [0.0907571, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.066004, [3, -0.0666667, 0.0247531], [3, 0.306667, -0.113864]], [-0.466294, [3, -0.306667, 0], [3, 0.36, 0]], [-0.0767419, [3, -0.36, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.96, 1.96, 2.16, 2.36, 2.56, 2.76, 2.96, 3.16, 3.36, 3.56, 3.76, 3.96, 4.16, 4.36, 4.56, 4.76, 4.96, 5.16, 5.36, 6.28, 7.16, 7.36, 7.56, 7.76, 7.96, 8.16, 8.36, 8.56, 8.76, 8.96, 9.16, 9.36, 9.56, 9.76, 9.96, 10.16, 10.36, 10.56, 11.48, 12.56])
        keys.append([[-0.10282, [3, -0.333333, 0], [3, 0.333333, 0]], [0.421808, [3, -0.333333, 0], [3, 0.0666667, 0]], [0.409536, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.46476, [3, -0.0666667, -0.0127834], [3, 0.0666667, 0.0127834]], [0.486237, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.472429, [3, -0.0666667, 0.0138073], [3, 0.0666667, -0.0138073]], [0.131882, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.421808, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.409536, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.46476, [3, -0.0666667, -0.0127834], [3, 0.0666667, 0.0127834]], [0.486237, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.472429, [3, -0.0666667, 0.0138073], [3, 0.0666667, -0.0138073]], [0.131882, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.421808, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.409536, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.46476, [3, -0.0666667, -0.0127834], [3, 0.0666667, 0.0127834]], [0.486237, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.472429, [3, -0.0666667, 0.0138073], [3, 0.0666667, -0.0138073]], [0.131882, [3, -0.0666667, 0], [3, 0.306667, 0]], [0.581345, [3, -0.306667, 0], [3, 0.293333, 0]], [0.573758, [3, -0.293333, 0], [3, 0.0666667, 0]], [0.615176, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.412688, [3, -0.0666667, 0.0700526], [3, 0.0666667, -0.0700526]], [0.194861, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.961676, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.763974, [3, -0.0666667, 0.0646531], [3, 0.0666667, -0.0646531]], [0.573758, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.615176, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.412688, [3, -0.0666667, 0.0700526], [3, 0.0666667, -0.0700526]], [0.194861, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.961676, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.763974, [3, -0.0666667, 0.0646531], [3, 0.0666667, -0.0646531]], [0.573758, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.615176, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.411154, [3, -0.0666667, 0.0700526], [3, 0.0666667, -0.0700526]], [0.194861, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.961676, [3, -0.0666667, 0], [3, 0.0666667, 0]], [0.763974, [3, -0.0666667, 0], [3, 0.306667, 0]], [1.79483, [3, -0.306667, 0], [3, 0.36, 0]], [0.118076, [3, -0.36, 0], [3, 0, 0]]])


        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def wearing_out(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.92, 1.64, 3.24, 3.92, 4.48, 5.04])
        keys.append([[-0.0261199, [3, -0.32, 0], [3, 0.24, 0]], [0.427944, [3, -0.24, 0], [3, 0.533333, 0]], [0.308291, [3, -0.533333, 0.0739191], [3, 0.226667, -0.0314156]], [0.11194, [3, -0.226667, 0.0588857], [3, 0.186667, -0.0484941]], [-0.013848, [3, -0.186667, 0], [3, 0.186667, 0]], [0.061318, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([0.92, 1.64, 3.24, 3.92, 4.48, 5.04])
        keys.append([[-0.234743, [3, -0.32, 0], [3, 0.24, 0]], [-0.622845, [3, -0.24, 0], [3, 0.533333, 0]], [-0.113558, [3, -0.533333, -0.14425], [3, 0.226667, 0.0613061]], [-0.00617796, [3, -0.226667, 0], [3, 0.186667, 0]], [-0.027654, [3, -0.186667, 0.00511335], [3, 0.186667, -0.00511335]], [-0.036858, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.76, 1.48, 3.08, 3.76, 4.32, 4.88])
        keys.append([[-0.866668, [3, -0.266667, 0], [3, 0.24, 0]], [-0.868202, [3, -0.24, 0], [3, 0.533333, 0]], [-0.822183, [3, -0.533333, 0], [3, 0.226667, 0]], [-0.992455, [3, -0.226667, 0], [3, 0.186667, 0]], [-0.966378, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.990923, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.76, 1.48, 3.08, 3.76, 4.32, 4.88])
        keys.append([[-0.957257, [3, -0.266667, 0], [3, 0.24, 0]], [-0.823801, [3, -0.24, 0], [3, 0.533333, 0]], [-1.00788, [3, -0.533333, 0], [3, 0.226667, 0]], [-0.925044, [3, -0.226667, 0], [3, 0.186667, 0]], [-1.24412, [3, -0.186667, 0], [3, 0.186667, 0]], [-0.960325, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([1.48, 3.08, 3.76, 4.88])
        keys.append([[0.132026, [3, -0.506667, 0], [3, 0.533333, 0]], [0.132026, [3, -0.533333, 0], [3, 0.226667, 0]], [0.132026, [3, -0.226667, 0], [3, 0.373333, 0]], [0.132026, [3, -0.373333, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.76, 1.48, 3.08, 3.76, 4.32, 4.88])
        keys.append([[0.863599, [3, -0.266667, 0], [3, 0.24, 0]], [0.858999, [3, -0.24, 0], [3, 0.533333, 0]], [0.888144, [3, -0.533333, -0.0165061], [3, 0.226667, 0.0070151]], [0.929562, [3, -0.226667, -0.0235543], [3, 0.186667, 0.0193977]], [1.017, [3, -0.186667, 0], [3, 0.186667, 0]], [0.977116, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.76, 1.48, 3.08, 3.76, 4.32, 4.88])
        keys.append([[0.286815, [3, -0.266667, 0], [3, 0.24, 0]], [0.230059, [3, -0.24, 0.00872785], [3, 0.533333, -0.0193952]], [0.202446, [3, -0.533333, 0], [3, 0.226667, 0]], [0.406468, [3, -0.226667, 0], [3, 0.186667, 0]], [0.360449, [3, -0.186667, 0.0145729], [3, 0.186667, -0.0145729]], [0.31903, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([1.48, 3.08, 3.76, 4.88])
        keys.append([[0.386526, [3, -0.506667, 0], [3, 0.533333, 0]], [0.386526, [3, -0.533333, 0], [3, 0.226667, 0]], [0.386526, [3, -0.226667, 0], [3, 0.373333, 0]], [0.386526, [3, -0.373333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.6, 1.32, 2.92, 3.6, 4.16, 4.72])
        keys.append([[1.28093, [3, -0.213333, 0], [3, 0.24, 0]], [1.39752, [3, -0.24, -0.030151], [3, 0.533333, 0.0670022]], [1.57239, [3, -0.533333, 0], [3, 0.226667, 0]], [1.24105, [3, -0.226667, 0.0186267], [3, 0.186667, -0.0153397]], [1.22571, [3, -0.186667, 0.0153397], [3, 0.186667, -0.0153397]], [0.840674, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.6, 1.32, 2.92, 3.6, 4.16, 4.72])
        keys.append([[-0.128898, [3, -0.213333, 0], [3, 0.24, 0]], [-0.285367, [3, -0.24, 0], [3, 0.533333, 0]], [-0.15651, [3, -0.533333, -0.128857], [3, 0.226667, 0.0547641]], [0.754686, [3, -0.226667, -0.242834], [3, 0.186667, 0.199981]], [1.17193, [3, -0.186667, 0], [3, 0.186667, 0]], [0.677985, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([1.32, 2.92, 3.6, 4.72])
        keys.append([[0.166571, [3, -0.453333, 0], [3, 0.533333, 0]], [0.166208, [3, -0.533333, 0], [3, 0.226667, 0]], [0.166571, [3, -0.226667, 0], [3, 0.373333, 0]], [0.166208, [3, -0.373333, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.6, 1.32, 2.92, 3.6, 4.16, 4.72])
        keys.append([[0.0767419, [3, -0.213333, 0], [3, 0.24, 0]], [-0.59515, [3, -0.24, 0.0975941], [3, 0.533333, -0.216876]], [-0.866668, [3, -0.533333, 0], [3, 0.226667, 0]], [-0.613558, [3, -0.226667, -0.253109], [3, 0.186667, 0.208443]], [0.584497, [3, -0.186667, -0.249275], [3, 0.186667, 0.249275]], [0.882091, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.6, 1.32, 2.92, 3.6, 4.16, 4.72])
        keys.append([[-0.019984, [3, -0.213333, 0], [3, 0.24, 0]], [-0.019984, [3, -0.24, 0], [3, 0.533333, 0]], [-0.615176, [3, -0.533333, 0.19018], [3, 0.226667, -0.0808265]], [-0.833004, [3, -0.226667, 0], [3, 0.186667, 0]], [-0.224006, [3, -0.186667, -0.00920487], [3, 0.186667, 0.00920487]], [-0.214801, [3, -0.186667, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([1.32, 2.92, 3.6, 4.72])
        keys.append([[-0.058334, [3, -0.453333, 0], [3, 0.533333, 0]], [-0.0521979, [3, -0.533333, 0], [3, 0.226667, 0]], [-0.067538, [3, -0.226667, 0], [3, 0.373333, 0]], [-0.038392, [3, -0.373333, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

    def clap_hands(self):
        names = list()
        times = list()
        keys = list()

        names.append("HeadPitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.121144, [3, -0.208333, 0], [3, 0.208333, 0]], [0.121144, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.230143, [3, -0.208333, 0], [3, 0.208333, 0]], [0.0996681, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0859459, [3, -0.208333, 0], [3, 0.208333, 0]], [0.139552, [3, -0.208333, 0], [3, 0.208333, 0]], [0.138018, [3, -0.208333, 0.00153397], [3, 0.208333, -0.00153397]], [0.118076, [3, -0.208333, 0.0173853], [3, 0.208333, -0.0173853]], [0.033706, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("HeadYaw")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.091998, [3, -0.208333, 0], [3, 0.208333, 0]], [0.093532, [3, -0.208333, -0.00153397], [3, 0.208333, 0.00153397]], [0.105804, [3, -0.208333, 0], [3, 0.208333, 0]], [0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [0.54146, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.18719, [3, -0.208333, 0.213226], [3, 0.208333, -0.213226]], [-0.737896, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.075208, [3, -0.208333, -0.133458], [3, 0.208333, 0.133458]], [0.0628521, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LAnklePitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.0291041, [3, -0.208333, 0], [3, 0.208333, 0]], [0.010696, [3, -0.208333, 0.00485767], [3, 0.208333, -0.00485767]], [-4.19617e-05, [3, -0.208333, 0.00281233], [3, 0.208333, -0.00281233]], [-0.00617796, [3, -0.208333, 0.00357934], [3, 0.208333, -0.00357934]], [-0.021518, [3, -0.208333, 0.00306794], [3, 0.208333, -0.00306794]], [-0.0245859, [3, -0.208333, 0.00178966], [3, 0.208333, -0.00178966]], [-0.032256, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.012314, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0353239, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LAnkleRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.067454, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0735901, [3, -0.208333, 0.00127834], [3, 0.208333, -0.00127834]], [-0.075124, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0735901, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.075124, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.075124, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.078192, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.075124, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.075124, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LElbowRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.659577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.71787, [3, -0.208333, 0.00613652], [3, 0.208333, -0.00613652]], [-0.724006, [3, -0.208333, 0.00613652], [3, 0.208333, -0.00613652]], [-1.00473, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.438682, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.843657, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.421808, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.559868, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.329768, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LElbowYaw")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-1.02475, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.605971, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.607505, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.43263, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.470981, [3, -0.208333, 0.00153411], [3, 0.208333, -0.00153411]], [-0.472515, [3, -0.208333, 0.00153411], [3, 0.208333, -0.00153411]], [-0.506262, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.431096, [3, -0.208333, -0.0495994], [3, 0.208333, 0.0495994]], [-0.208666, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LHand")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LHipPitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.452573, [3, -0.208333, 0], [3, 0.208333, 0]], [0.460242, [3, -0.208333, 0], [3, 0.208333, 0]], [0.460242, [3, -0.208333, 0], [3, 0.208333, 0]], [0.458707, [3, -0.208333, 0], [3, 0.208333, 0]], [0.460242, [3, -0.208333, 0], [3, 0.208333, 0]], [0.455639, [3, -0.208333, 0], [3, 0.208333, 0]], [0.464844, [3, -0.208333, 0], [3, 0.208333, 0]], [0.46331, [3, -0.208333, 0], [3, 0.208333, 0]], [0.46331, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LHipRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.119694, [3, -0.208333, 0], [3, 0.208333, 0]], [0.121228, [3, -0.208333, 0], [3, 0.208333, 0]], [0.119694, [3, -0.208333, 0], [3, 0.208333, 0]], [0.119694, [3, -0.208333, 0], [3, 0.208333, 0]], [0.121228, [3, -0.208333, 0], [3, 0.208333, 0]], [0.119694, [3, -0.208333, 0], [3, 0.208333, 0]], [0.121228, [3, -0.208333, 0], [3, 0.208333, 0]], [0.121228, [3, -0.208333, 0], [3, 0.208333, 0]], [0.119694, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LHipYawPitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.371186, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.343573, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.345107, [3, -0.208333, 0.000767068], [3, 0.208333, -0.000767068]], [-0.348176, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.348176, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.34971, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.338973, [3, -0.208333, -0.00357938], [3, 0.208333, 0.00357938]], [-0.328234, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.332836, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LKneePitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0923279, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LShoulderPitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[1.68429, [3, -0.208333, 0], [3, 0.208333, 0]], [0.46476, [3, -0.208333, 0], [3, 0.208333, 0]], [0.467829, [3, -0.208333, -0.00306829], [3, 0.208333, 0.00306829]], [0.516916, [3, -0.208333, 0], [3, 0.208333, 0]], [0.418739, [3, -0.208333, 0.0204532], [3, 0.208333, -0.0204532]], [0.394197, [3, -0.208333, 0.00792554], [3, 0.208333, -0.00792554]], [0.371186, [3, -0.208333, 0], [3, 0.208333, 0]], [0.766959, [3, -0.208333, -0.182802], [3, 0.208333, 0.182802]], [1.468, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LShoulderRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.216252, [3, -0.208333, 0], [3, 0.208333, 0]], [0.944902, [3, -0.208333, 0], [3, 0.208333, 0]], [0.937231, [3, -0.208333, 0.0076707], [3, 0.208333, -0.0076707]], [0.05825, [3, -0.208333, 0], [3, 0.208333, 0]], [0.931096, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124296, [3, -0.208333, 0], [3, 0.208333, 0]], [0.926494, [3, -0.208333, 0], [3, 0.208333, 0]], [0.631966, [3, -0.208333, 0.10917], [3, 0.208333, -0.10917]], [0.271475, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("LWristYaw")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.768577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.768577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.768577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.770111, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.768577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.768577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.768577, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.763974, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.763974, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RAnklePitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.0782759, [3, -0.208333, 0], [3, 0.208333, 0]], [0.0690719, [3, -0.208333, 0.00332366], [3, 0.208333, -0.00332366]], [0.058334, [3, -0.208333, 0.00255667], [3, 0.208333, -0.00255667]], [0.0537319, [3, -0.208333, 0.00281234], [3, 0.208333, -0.00281234]], [0.0414599, [3, -0.208333, 0.00255665], [3, 0.208333, -0.00255665]], [0.038392, [3, -0.208333, 0.00178966], [3, 0.208333, -0.00178966]], [0.030722, [3, -0.208333, 0], [3, 0.208333, 0]], [0.047596, [3, -0.208333, 0], [3, 0.208333, 0]], [0.029188, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RAnkleRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.0767419, [3, -0.208333, 0], [3, 0.208333, 0]], [0.084412, [3, -0.208333, 0], [3, 0.208333, 0]], [0.084412, [3, -0.208333, 0], [3, 0.208333, 0]], [0.084412, [3, -0.208333, 0], [3, 0.208333, 0]], [0.0859459, [3, -0.208333, -0.000766985], [3, 0.208333, 0.000766985]], [0.0890139, [3, -0.208333, -0.00127834], [3, 0.208333, 0.00127834]], [0.093616, [3, -0.208333, 0], [3, 0.208333, 0]], [0.092082, [3, -0.208333, 0], [3, 0.208333, 0]], [0.092082, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RElbowRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.368202, [3, -0.208333, 0], [3, 0.208333, 0]], [0.794654, [3, -0.208333, -0.0383501], [3, 0.208333, 0.0383501]], [0.833004, [3, -0.208333, -0.0383501], [3, 0.208333, 0.0383501]], [1.16435, [3, -0.208333, 0], [3, 0.208333, 0]], [0.799256, [3, -0.208333, 0], [3, 0.208333, 0]], [1.11219, [3, -0.208333, 0], [3, 0.208333, 0]], [0.889762, [3, -0.208333, 0], [3, 0.208333, 0]], [1.16895, [3, -0.208333, 0], [3, 0.208333, 0]], [0.145772, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RElbowYaw")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.914223, [3, -0.208333, 0], [3, 0.208333, 0]], [0.656511, [3, -0.208333, 0], [3, 0.208333, 0]], [0.656511, [3, -0.208333, 0], [3, 0.208333, 0]], [0.536858, [3, -0.208333, 0], [3, 0.208333, 0]], [0.602819, [3, -0.208333, 0], [3, 0.208333, 0]], [0.596684, [3, -0.208333, 0], [3, 0.208333, 0]], [0.638103, [3, -0.208333, 0], [3, 0.208333, 0]], [0.460158, [3, -0.208333, 0.0657064], [3, 0.208333, -0.0657064]], [0.243864, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RHand")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0.208333, 0]], [57.2958, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RHipPitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[0.377323, [3, -0.208333, 0], [3, 0.208333, 0]], [0.375789, [3, -0.208333, 0], [3, 0.208333, 0]], [0.375789, [3, -0.208333, 0], [3, 0.208333, 0]], [0.37272, [3, -0.208333, 0], [3, 0.208333, 0]], [0.374254, [3, -0.208333, 0], [3, 0.208333, 0]], [0.37272, [3, -0.208333, 0], [3, 0.208333, 0]], [0.378857, [3, -0.208333, 0], [3, 0.208333, 0]], [0.374254, [3, -0.208333, 0], [3, 0.208333, 0]], [0.375789, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RHipRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.122678, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.125746, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.124212, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RKneePitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.0812601, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RShoulderPitch")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[1.53251, [3, -0.208333, 0], [3, 0.208333, 0]], [0.435699, [3, -0.208333, 0], [3, 0.208333, 0]], [0.435699, [3, -0.208333, 0], [3, 0.208333, 0]], [0.490923, [3, -0.208333, 0], [3, 0.208333, 0]], [0.426494, [3, -0.208333, 0.0143175], [3, 0.208333, -0.0143175]], [0.405018, [3, -0.208333, 0.00306826], [3, 0.208333, -0.00306826]], [0.401949, [3, -0.208333, 0], [3, 0.208333, 0]], [0.905102, [3, -0.208333, -0.178967], [3, 0.208333, 0.178967]], [1.47575, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RShoulderRoll")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[-0.14884, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.974133, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.944986, [3, -0.208333, -0.029147], [3, 0.208333, 0.029147]], [-0.250085, [3, -0.208333, 0], [3, 0.208333, 0]], [-1.06157, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.257754, [3, -0.208333, 0], [3, 0.208333, 0]], [-1.09072, [3, -0.208333, 0], [3, 0.208333, 0]], [-0.83914, [3, -0.208333, -0.144452], [3, 0.208333, 0.144452]], [-0.224006, [3, -0.208333, 0], [3, 0, 0]]])

        names.append("RWristYaw")
        times.append([0.5, 1.125, 1.75, 2.375, 3, 3.625, 4.25, 4.875, 5.5])
        keys.append([[1.06149, [3, -0.208333, 0], [3, 0.208333, 0]], [0.920358, [3, -0.208333, 0], [3, 0.208333, 0]], [0.921892, [3, -0.208333, -0.00153411], [3, 0.208333, 0.00153411]], [0.935697, [3, -0.208333, -0.00153418], [3, 0.208333, 0.00153418]], [0.937231, [3, -0.208333, -0.00153418], [3, 0.208333, 0.00153418]], [1.0262, [3, -0.208333, -0.00460068], [3, 0.208333, 0.00460068]], [1.03081, [3, -0.208333, -0.00460068], [3, 0.208333, 0.00460068]], [1.1658, [3, -0.208333, 0], [3, 0.208333, 0]], [1.0937, [3, -0.208333, 0], [3, 0, 0]]])

        self.motionProxy.post.angleInterpolationBezier(names, times, keys)

#####################################################################################
#                                          MAIN
#####################################################################################
ln = Latinao()
ln.standInit()
ln.cow_movement()
ln.stand()
ln.clap_hands()
ln.StandZero()
ln.open_both_hands()
ln.close_both_hands()
ln.arms_dance()
ln.standInit()
ln.rotation_foot_L()
ln.sit()
ln.say()
ln.stand()
ln.wearing_out()
#ln.mov_3()
ln.venia() #last_movement
#ln.move_to_with_velocity(0.1,0,0.0,0.0)
#ln.head_pitch()
#ln.double_movement()
#ln.postureProxy.goToPosture("StandInit", 0.5)
#ln.motionProxy.stopMove()
#motionProxy.rest() #last postion]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Play Sound" id="2" localization="8" tooltip="Play a sound file. Select the file in parameters. The format of the file can be&#x0A;wav, mp3, or ogg.&#x0A;&#x0A;Note: There can be some delay to play mp3 files. We advise you to use wav if&#x0A;you want a fast play of the file." x="189" y="238"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.bIsRunning = False

    def onUnload(self):
        self.bIsRunning = False

    def onInput_onStart(self):
        self.bIsRunning = True

    def onInput_onStop(self):
        if( self.bIsRunning ):
            self.onUnload()
            self.onStopped()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Starts the music." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Stops the music." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished or stopped." id="4" /><Parameter name="File name" inherits_from_parent="0" content_type="4" value="/../song3.wav" default_value="" tooltip="Name of the file you want to play.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="5" /><Parameter name="Begin position (s)" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="6" /><Parameter name="Volume (%)" inherits_from_parent="0" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="7" /><Parameter name="Balance L/R" inherits_from_parent="0" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="8" /><Parameter name="Play in loop" inherits_from_parent="0" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="9" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="Play Sound File" id="2" localization="8" tooltip="Play the sound." x="442" y="70"><bitmap>media/images/box/interaction/play_music.png</bitmap><script language="4"><content><![CDATA[import time

class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )
        self.player = ALProxy('ALAudioPlayer')
        self.playerStop = ALProxy('ALAudioPlayer', True) #Create another proxy as wait is blocking if audioout is remote

    def onLoad(self):
        self.bIsRunning = False
        self.ids = []

    def onUnload(self):
        for id in self.ids:
            try:
                self.playerStop.stop(id)
            except:
                pass
        while( self.bIsRunning ):
            time.sleep( 0.2 )

    def onInput_onStart(self, p):
        self.bIsRunning = True
        try:
            if (self.getParameter("Play in loop")) :
               id = self.player.post.playFileInLoop(p,self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            else :
               id = self.player.post.playFileFromPosition(p,self.getParameter("Begin position (s)"),self.getParameter("Volume (%)")/100.,self.getParameter("Balance L/R"))
            self.ids.append(id)
            self.player.wait(id, 0)
        finally:
            try:
                self.ids.remove(id)
            except:
                pass
            if( self.ids == [] ):
                self.onStopped() # activate output of the box
                self.bIsRunning = False

    def onInput_onStop(self):
        self.onUnload()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when Diagram is loaded." id="1" /><Input name="onStart" type="3" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this Input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this Input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when Box behavior is finished." id="4" /><Parameter name="Begin position (s)" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="0" max="600" tooltip="Position in seconds where the playing must start." id="5" /><Parameter name="Volume (%)" inherits_from_parent="1" content_type="1" value="100" default_value="100" min="0" max="100" tooltip="Volume the file is played with." id="6" /><Parameter name="Balance L/R" inherits_from_parent="1" content_type="2" value="0" default_value="0" min="-1" max="1" tooltip="Value which determines if the sound is played more on the robot&apos;s left or right.&#x0A;You can particularly set it to:&#x0A;- -1 to play only on the left loudspeaker.&#x0A;- 0 to play on both loudspeakers.&#x0A;- 1 to play only on the right loudspeaker." id="7" /><Parameter name="Play in loop" inherits_from_parent="1" content_type="0" value="0" default_value="0" tooltip="This parameter allows to play the file in loop. The playing will start each time at&#x0A;the beginning of the file." id="8" /></Box><Box name="Get Attached File" id="1" localization="8" tooltip="Use this box to choose an attached file in its parameters. The filename will be sent on&#x0A;the output when the input is stimulated." x="216" y="71"><bitmap>media/images/box/folder.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        try: # disable autoBind
          GeneratedClass.__init__(self, False)
        except TypeError: # if NAOqi < 1.14
          GeneratedClass.__init__( self )

    def onLoad(self):
        self.framemanager = ALProxy("ALFrameManager")

    def onInput_onStart(self):
        self.onStopped(self.framemanager.getBehaviorPath(self.behaviorId) + self.getParameter("File name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="1" inner="0" tooltip="To send the filepath on the output." id="2" /><Output name="onStopped" type="3" type_size="1" nature="2" inner="0" tooltip="The filepath of the selected resource file." id="3" /><Parameter name="File name" inherits_from_parent="1" content_type="4" value="" default_value="" tooltip="Name of the file which is going to be sent on the box output.&#x0A;&#x0A;Note: You can click on the folder icon to browse the project content or import&#x0A;new files to the project." id="4" /></Box><Link inputowner="0" indexofinput="4" outputowner="2" indexofoutput="4" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="2" indexofinput="2" outputowner="1" indexofoutput="3" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>